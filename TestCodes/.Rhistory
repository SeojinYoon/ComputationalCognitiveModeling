library(rstan)
model <- "
// One-Sample Comparsion of Means
data {
int<lower=0> ndata;
vector[ndata] x;
}
parameters {
real sigmatmp;
real delta;
}
transformed parameters {
real mu;
real<lower=0> sigma;
sigma = fabs(sigmatmp);
mu = delta * sigma;
}
model {
// Delta and sigma Come From (Half) Cauchy Distributions
sigmatmp ~ cauchy(0, 1);
delta ~ cauchy(0, 1);
// Data
x ~ normal(mu, sigma);
}"
# Read data Dr. Smith
Winter <- c(-0.05,0.41,0.17,-0.13,0.00,-0.05,0.00,0.17,0.29,0.04,0.21,0.08,0.37,
0.17,0.08,-0.04,-0.04,0.04,-0.13,-0.12,0.04,0.21,0.17,0.17,0.17,
0.33,0.04,0.04,0.04,0.00,0.21,0.13,0.25,-0.05,0.29,0.42,-0.05,0.12,
0.04,0.25,0.12)
Summer <- c(0.00,0.38,-0.12,0.12,0.25,0.12,0.13,0.37,0.00,0.50,0.00,0.00,-0.13,
-0.37,-0.25,-0.12,0.50,0.25,0.13,0.25,0.25,0.38,0.25,0.12,0.00,0.00,
0.00,0.00,0.25,0.13,-0.25,-0.38,-0.13,-0.25,0.00,0.00,-0.12,0.25,
0.00,0.50,0.00)
x <- Winter - Summer  # allowed because it is a within-subjects design
x <- x / sd(x)        # standardize
ndata <- length(Winter) # number of subjects
data <- list(x=x, ndata=ndata) # to be passed on to Stan
myinits <- list(
list(delta=rnorm(1,0,3), deltaprior=rnorm(1,0,3), sigmatmp = rnorm(1,0,1)),
list(delta=rnorm(1,0,3), deltaprior=rnorm(1,0,3), sigmatmp = rnorm(1,0,1)),
list(delta=rnorm(1,0,3), deltaprior=rnorm(1,0,3), sigmatmp = rnorm(1,0,1)))
# Parameters to be monitored
parameters <- c("delta")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=3,
thin=1
# warmup=100,  # Stands for burn-in; Default = iter/2
# seed=123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
plot(samples)
# Collect posterior samples across all chains:
delta.posterior <- extract(samples)$delta
#============ BFs based on logspline fit ===========================
library(logspline) # this package can be installed from within R
fit.posterior <- logspline(delta.posterior)
# 95% confidence interval:
x0 <- qlogspline(0.025,fit.posterior)
x1 <- qlogspline(0.975,fit.posterior)
posterior <- dlogspline(0, fit.posterior) # this gives the pdf at point delta = 0
prior     <- dcauchy(0)          # height of order-restricted prior at delta = 0
BF01      <- posterior/prior
BF01
#============ Plot Prior and Posterior  ===========================
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
xlow  <- -3
xhigh <- 3
yhigh <- 4
Nbreaks <- 80
y       <- hist(delta.posterior, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=2,
xlim=c(xlow,xhigh), ylim=c(0,yhigh), xlab=" ", ylab="Density", axes=F)
quartz()
plot(samples)
paste("\nSource code is on checking:", r_file)
paste("/Users/seojin/Documents/ComputationalCognitiveModeling/", "BayesianCognitiveModeling")
paste("/Users/seojin/Documents/ComputationalCognitiveModeling", "BayesianCognitiveModeling")
paste0("/Users/seojin/Documents/ComputationalCognitiveModeling", "BayesianCognitiveModeling")
paste0("/Users/seojin/Documents/ComputationalCognitiveModeling/", "BayesianCognitiveModeling")
base_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/"
bcm_dir_path <- paste0(base_dir_path, "BayesianCognitiveModeling")
bcm_dir_path
bcm_dir_path <- paste0(base_dir_path, "BayesianCognitiveModeling/")
bcm_dir_path <- paste0(base_dir_path, "BayesianCognitiveModeling/", collapse = "")
bcm_dir_path
bcm_dir_path <- paste0(base_dir_path, "BayesianCognitiveModeling/", collapse = " ")
bcm_dir_path
bcm_dir_path <- paste0(base_dir_path, "BayesianCognitiveModeling", collapse = "")
bcm_dir_path
base_dir_path
bcm_dir_path <- paste0(base_dir_path, "BayesianCognitiveModeling", collapse = "  ")
bcm_dir_path
bcm_dir_path <- paste(base_dir_path, "BayesianCognitiveModeling", collapse = "  ")
bcm_dir_path
bcm_dir_path <- paste(base_dir_path, "BayesianCognitiveModeling", collapse = "/")
bcm_dir_path
bcm_dir_path <- paste0(base_dir_path, "BayesianCognitiveModeling/", )
bcm_dir_path <- paste0(base_dir_path, "BayesianCognitiveModeling/")
bcm_dir_path
test_code_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes"
paste0(test_code_dir_path, "BayesianCognitiveModeling_log.txt")
paste0(test_code_dir_path, "/" , "BayesianCognitiveModeling_log.txt")
bcm_dir_path <- paste0(base_dir_path, "BayesianCognitiveModeling", "/")
paste0(test_code_dir_path, "/" , "BayesianCognitiveModeling_log.txt")
log_file_path <- paste0(test_code_dir_path, "/" , "BayesianCognitiveModeling_log.txt")
log_file_path
checked_source_path <- paste0(test_code_dir_path, "/" , "BayesianCognitiveModeling_checked.csv")
checked_source_path
test_code_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes"
dir_path <- paste0(base_dir_path, "/", "BayesianCognitiveModeling")
dir_path
base_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling"
test_code_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes"
dir_path <- paste0(base_dir_path, "/", "BayesianCognitiveModeling")
dir_path
log_file_path <- paste0(test_code_dir_path, "/" , "BayesianCognitiveModeling_log.txt")
log_file_path
checked_source_path <- paste0(test_code_dir_path, "/" , "BayesianCognitiveModeling_checked.csv")
checked_source_path
plot_dir_path <- paste0(test_code_dir_path, "/" , "BayesianCognitiveModeling")
plot_dir_path
target <- "BayesianCognitiveModeling"
target <- "BayesianCognitiveModeling"
base_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling"
test_code_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes"
dir_path <- paste0(base_dir_path, "/", target)
log_file_path <- paste0(test_code_dir_path, "/" , target, "_log.txt")
checked_source_path <- paste0(test_code_dir_path, "/" , target, "_checked.csv")
log_file_path
checked_source_path
target + "_log.txt"
paste0(target, "_log.txt")
paste0(target, "_checked.csv")
checked_source_path <- paste0(test_code_dir_path, "/" , paste0(target, "_checked.csv"))
checked_source_path
checked_source_path <- paste0(test_code_dir_path, "/" , paste0(target, "_checked.csv"))
plot_dir_path <- paste0(test_code_dir_path, "/" , target)
plot_dir_path
# Load the necessary library
library(dplyr)
install.packages("rjags")
library(rjags)
install.packages("rjags")
library(rjags)
remove.packages("rjags")
library(rjags)
install.packages("rjags", type="source")
remove.packages("rjags")
install.packages("rjags", type="source")
install.packages("rjags", configure.args="--with-jags=/opt/homebrew/")
library(rjags)
remove.packages("rjags")
install.packages("rjags", type="source")
install.packages("rjags", type="source")
library(rjags)
remove.packages("rjags")
install.packages("rjags", type="source")
library(rjags)
remove.packages("rjags")
library(rjags)
install.packages("rjags", type="source")
library(rjags)
install.packages("rjags", type="source")
library(rjags)
library(rjags)
library(rjags)
remove.packages("rjags")
remove.packages("rjags")
install.packages("rjags")
library(rjags)
# Parameters
target <- "ComputationalModeling"
base_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling"
test_code_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes"
dir_path <- paste0(base_dir_path, "/", target)
log_file_path <- paste0(test_code_dir_path, "/" , paste0(target, "_log.txt"))
checked_source_path <- paste0(test_code_dir_path, "/" , paste0(target, "_checked.csv"))
plot_dir_path <- paste0(test_code_dir_path, "/" , target)
# List all .R files recursively
r_files <- list.files(path = dir_path, pattern = "\\.R$", recursive = TRUE, full.names = TRUE)
# Create dataframe to write checking result
if (!file.exists(checked_source_path)) {
df <- data.frame(path = c("Test"), isGood = c(TRUE))
for (r_file in r_files) {
new_row <- data.frame(
path = r_file,
isGood = FALSE
)
df <- rbind(df, new_row)
}
write.csv(df, file = checked_source_path, row.names = FALSE)
checking_files <- r_files
} else {
df <- read.csv(checked_source_path)
filtered_df <- df %>% filter(isGood == TRUE)
checking_files <- r_files[!r_files %in% filtered_df$path]
}
# Parameters
target <- "ComputationalModeling"
base_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling"
test_code_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes"
dir_path <- paste0(base_dir_path, "/", target)
log_file_path <- paste0(test_code_dir_path, "/" , paste0(target, "_log.txt"))
checked_source_path <- paste0(test_code_dir_path, "/" , paste0(target, "_checked.csv"))
plot_dir_path <- paste0(test_code_dir_path, "/" , target)
# List all .R files recursively
r_files <- list.files(path = dir_path, pattern = "\\.R$", recursive = TRUE, full.names = TRUE)
# Create dataframe to write checking result
if (!file.exists(checked_source_path)) {
df <- data.frame(path = c("Test"), isGood = c(TRUE))
for (r_file in r_files) {
new_row <- data.frame(
path = r_file,
isGood = FALSE
)
df <- rbind(df, new_row)
}
write.csv(df, file = checked_source_path, row.names = FALSE)
checking_files <- r_files
} else {
df <- read.csv(checked_source_path)
filtered_df <- df %>% filter(isGood == TRUE)
checking_files <- r_files[!r_files %in% filtered_df$path]
}
# Load the necessary library
library(dplyr)
# Parameters
target <- "ComputationalModeling"
base_dir_path <- "/Users/seojin/Desktop/ComputationalCognitiveModeling"
test_code_dir_path <- "/Users/seojin/Desktop/ComputationalCognitiveModeling/TestCodes"
dir_path <- paste0(base_dir_path, "/", target)
log_file_path <- paste0(test_code_dir_path, "/" , paste0(target, "_log.txt"))
checked_source_path <- paste0(test_code_dir_path, "/" , paste0(target, "_checked.csv"))
plot_dir_path <- paste0(test_code_dir_path, "/" , target)
# List all .R files recursively
r_files <- list.files(path = dir_path, pattern = "\\.R$", recursive = TRUE, full.names = TRUE)
# Create dataframe to write checking result
if (!file.exists(checked_source_path)) {
df <- data.frame(path = c("Test"), isGood = c(TRUE))
for (r_file in r_files) {
new_row <- data.frame(
path = r_file,
isGood = FALSE
)
df <- rbind(df, new_row)
}
write.csv(df, file = checked_source_path, row.names = FALSE)
checking_files <- r_files
} else {
df <- read.csv(checked_source_path)
filtered_df <- df %>% filter(isGood == TRUE)
checking_files <- r_files[!r_files %in% filtered_df$path]
}
checking_files
