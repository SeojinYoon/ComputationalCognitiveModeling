uniform_samples
library(rstan)
packageVersion("rstan")
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1)
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list)
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500, algorithm = "Fixed_param")
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500, algorithm = "HMC")
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500, algorithm = "NUTS")
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500, algorithm = "HMC")
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
### WARNING: Run PsychometricFunction1.R first and do not close the R window.
# Set working directory!
library(rstan)
model <- "
// Logistic Psychophysical Function with Contaminants
data {
int<lower = 1> nsubjs; // n of participants (row)
int<lower = 1> nstim[nsubjs]; // n of stimuli (columns excluding NAs/-99)
int n[nsubjs,28]; // n of times the participant is exposed to the stimulus
int r[nsubjs,28]; // n of times the participant judges the stimulus as longer
int x[nsubjs,28]; // stimulus intensity
vector[nsubjs] xmean; // mean intensity by subject
}
parameters {
real mua; // pop level intercept estimate
real mub; // pop level slope estimate
real mup; // pop level probability of contaminant (not paying attention)
real<lower=0,upper=1000> sigmaa; // Uniform prior(0, 1000), pop level variance of intercept estimate
real<lower=0,upper=1000> sigmab; // Uniform prior(0, 1000), pop level variance of slope estimate
real<lower=0,upper=3> sigmap; // Uniform prior(0, 3)
vector[nsubjs] alpha; // individual level intercept estimate
vector[nsubjs] beta; // individual level slope estimate
vector[nsubjs] probitphi; // individual level probability of contaminant
matrix<lower=0,upper=1>[nsubjs,28] pi; //  success rate when contaminant process is on (not sure why it's by trial by participant)
}
transformed parameters {
matrix[2] lp_parts[nsubjs,28]; // probability of contaminant by participant by trial
vector<lower=0,upper=1>[nsubjs] phi; // probability of contaminant by participant
for (i in 1:nsubjs)
phi[i] <- Phi(probitphi[i]);
for (i in 1:nsubjs) {
for (j in 1:nstim[i]) {
real theta;
theta <- inv_logit(alpha[i] + beta[i] * (x[i,j] - xmean[i]));
lp_parts[i,j,1] <- log1m(phi[i]) + binomial_lpmf(r[i,j] | n[i,j], theta);
lp_parts[i,j,2] <- log(phi[i]) + binomial_lpmf(r[i,j] | n[i,j], pi[i,j]);
}
}
}
model {
// Priors
mua ~ normal(0, inv_sqrt(.001));
mub ~ normal(0, inv_sqrt(.001));
mup ~ normal(0, 1);
for (i in 1:nsubjs)
pi[i] ~ beta(1, 1);  // can be removed
alpha ~ normal(mua, sigmaa);
beta ~ normal(mub, sigmab);
probitphi ~ normal(mup, sigmap);
for (i in 1:nsubjs)
for (j in 1:nstim[i])
increment_log_prob(log_sum_exp(lp_parts[i,j]));
}
generated quantities {
int<lower=0,upper=1> z[nsubjs,28];
for (i in 1:nsubjs) {
for (j in 1:nstim[i]) {
vector[2] prob;
prob <- softmax(lp_parts[i,j]);
z[i,j] <- bernoulli_rng(prob[2]);
}
}
}"
x <- as.matrix(read.table("data_x.txt", sep="\t"))
x[is.na(x)] = -99  # transforming because Stan won't accept NAs
n <- as.matrix(read.table("data_n.txt", sep="\t"))
n[is.na(n)] = -99  # transforming because Stan won't accept NAs
r <- as.matrix(read.table("data_r.txt", sep="\t"))
r[is.na(r)] = -99  # transforming because Stan won't accept NAs
rprop <- as.matrix(read.table("data_rprop.txt", sep="\t"))
xmean <- c(318.888, 311.0417, 284.4444, 301.5909,
296.2000, 305.7692, 294.6429, 280.3571)
nstim <- c(27, 24, 27, 22, 25, 26, 28, 28)
nsubjs <- 8
# to be passed on to Stan
data <- list(x=x, xmean=xmean, n=n, r=r, nsubjs=nsubjs, nstim=nstim)
myinits <- list(
list(alpha=rep(0, nsubjs), beta=rep(.05, nsubjs), probitphi=rep(-2, nsubjs),
mua=0, mub=0, mup=-2, sigmaa=1, sigmab=.1, sigmap=1,
pi=matrix(runif(nsubjs * 28), nsubjs, 28)),
list(alpha=rep(0, nsubjs), beta=rep(0, nsubjs), probitphi=rep(0, nsubjs),
mua=0, mub=0, mup=0, sigmaa=1, sigmab=1, sigmap=1,
pi=matrix(runif(nsubjs * 28), nsubjs, 28)))
parameters <- c("alpha", "beta", "z")  # Parameters to be monitored
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,
pars=parameters,
iter=1200,
chains=2,
thin=1,
warmup=200,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
### WARNING: Run PsychometricFunction1.R first and do not close the R window.
# Set working directory!
library(rstan)
model <- "
// Logistic Psychophysical Function with Contaminants
data {
int<lower = 1> nsubjs; // n of participants (row)
int<lower = 1> nstim[nsubjs]; // n of stimuli (columns excluding NAs/-99)
int n[nsubjs,28]; // n of times the participant is exposed to the stimulus
int r[nsubjs,28]; // n of times the participant judges the stimulus as longer
int x[nsubjs,28]; // stimulus intensity
vector[nsubjs] xmean; // mean intensity by subject
}
parameters {
real mua; // pop level intercept estimate
real mub; // pop level slope estimate
real mup; // pop level probability of contaminant (not paying attention)
real<lower=0,upper=1000> sigmaa; // Uniform prior(0, 1000), pop level variance of intercept estimate
real<lower=0,upper=1000> sigmab; // Uniform prior(0, 1000), pop level variance of slope estimate
real<lower=0,upper=3> sigmap; // Uniform prior(0, 3)
vector[nsubjs] alpha; // individual level intercept estimate
vector[nsubjs] beta; // individual level slope estimate
vector[nsubjs] probitphi; // individual level probability of contaminant
matrix<lower=0,upper=1>[nsubjs,28] pi; //  success rate when contaminant process is on (not sure why it's by trial by participant)
}
transformed parameters {
matrix[nsubjs,28] lp_parts; // probability of contaminant by participant by trial
vector<lower=0,upper=1>[nsubjs] phi; // probability of contaminant by participant
for (i in 1:nsubjs)
phi[i] <- Phi(probitphi[i]);
for (i in 1:nsubjs) {
for (j in 1:nstim[i]) {
real theta;
theta <- inv_logit(alpha[i] + beta[i] * (x[i,j] - xmean[i]));
lp_parts[i,j,1] <- log1m(phi[i]) + binomial_lpmf(r[i,j] | n[i,j], theta);
lp_parts[i,j,2] <- log(phi[i]) + binomial_lpmf(r[i,j] | n[i,j], pi[i,j]);
}
}
}
model {
// Priors
mua ~ normal(0, inv_sqrt(.001));
mub ~ normal(0, inv_sqrt(.001));
mup ~ normal(0, 1);
for (i in 1:nsubjs)
pi[i] ~ beta(1, 1);  // can be removed
alpha ~ normal(mua, sigmaa);
beta ~ normal(mub, sigmab);
probitphi ~ normal(mup, sigmap);
for (i in 1:nsubjs)
for (j in 1:nstim[i])
increment_log_prob(log_sum_exp(lp_parts[i,j]));
}
generated quantities {
int<lower=0,upper=1> z[nsubjs,28];
for (i in 1:nsubjs) {
for (j in 1:nstim[i]) {
vector[2] prob;
prob <- softmax(lp_parts[i,j]);
z[i,j] <- bernoulli_rng(prob[2]);
}
}
}"
x <- as.matrix(read.table("data_x.txt", sep="\t"))
x[is.na(x)] = -99  # transforming because Stan won't accept NAs
n <- as.matrix(read.table("data_n.txt", sep="\t"))
n[is.na(n)] = -99  # transforming because Stan won't accept NAs
r <- as.matrix(read.table("data_r.txt", sep="\t"))
r[is.na(r)] = -99  # transforming because Stan won't accept NAs
rprop <- as.matrix(read.table("data_rprop.txt", sep="\t"))
xmean <- c(318.888, 311.0417, 284.4444, 301.5909,
296.2000, 305.7692, 294.6429, 280.3571)
nstim <- c(27, 24, 27, 22, 25, 26, 28, 28)
nsubjs <- 8
# to be passed on to Stan
data <- list(x=x, xmean=xmean, n=n, r=r, nsubjs=nsubjs, nstim=nstim)
myinits <- list(
list(alpha=rep(0, nsubjs), beta=rep(.05, nsubjs), probitphi=rep(-2, nsubjs),
mua=0, mub=0, mup=-2, sigmaa=1, sigmab=.1, sigmap=1,
pi=matrix(runif(nsubjs * 28), nsubjs, 28)),
list(alpha=rep(0, nsubjs), beta=rep(0, nsubjs), probitphi=rep(0, nsubjs),
mua=0, mub=0, mup=0, sigmaa=1, sigmab=1, sigmap=1,
pi=matrix(runif(nsubjs * 28), nsubjs, 28)))
parameters <- c("alpha", "beta", "z")  # Parameters to be monitored
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,
pars=parameters,
iter=1200,
chains=2,
thin=1,
warmup=200,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
library(rstan)
packageVersion("rstan")
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500, algorithm = "HMC")
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500, algorithm = "fixed_params")
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500, algorithm = "Fixed_param")
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500)
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
# Define the data
data_list <- list(
N = 100,       # Number of trials
p = 0.5        # Probability of success
)
# Compile the Stan model
stan_model <- stan_model("test.stan")
library(rstan)
packageVersion("rstan")
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
# Define the data
data_list <- list(
N = 100,       # Number of trials
p = 0.5        # Probability of success
)
# Compile the Stan model
stan_model <- stan_model("test.stan")
library(rstan)
packageVersion("rstan")
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
# Define the data
data_list <- list(
N = 100,       # Number of trials
p = 0.5        # Probability of success
)
# Compile the Stan model
stan_model <- stan_model("test.stan")
# Run the Stan model to generate samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500)
# Extract and print the simulated samples
y_sim <- extract(stan_samples, "y_sim")$y_sim
print(y_sim)
extract(stan_samples, "u")
y_sim
print(y_sim)
extract(stan_samples, "u")
extract(stan_samples, "uniform_samples")
library(rstan)
packageVersion("rstan")
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
# Define the data
data_list <- list(
N = 100,       # Number of trials
p = 0.5        # Probability of success
)
# Compile the Stan model
stan_model <- stan_model("test.stan")
# Run the Stan model to generate samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500)
# Extract and print the simulated samples
y_sim <- extract(stan_samples, "y_sim")$y_sim
print(y_sim)
extract(stan_samples, "uniform_samples")
extract(stan_samples, "y_sim")
extract(stan_samples, "uniform_samples")
library(rstan)
packageVersion("rstan")
# install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), dependencies = TRUE)
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500)
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500, seed = 42)
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500, seed = 100)
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500, seed = 1)
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500, seed = 42)
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 1000, warmup = 500, seed = 42)
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 2, warmup = 1, seed = 42)
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
library(rstan)
packageVersion("rstan")
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
library(rstan)
packageVersion("rstan")
# Define the data
data_list <- list(
num_samples = 100  # Change this to your desired number of samples
)
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
# Run the Stan model to generate uniform random samples
stan_samples <- sampling(stan_model, data = data_list, chains = 1, iter = 2, warmup = 1, seed = 42)
# Extract and print the generated uniform random samples
uniform_samples <- extract(stan_samples, "uniform_samples")$uniform_samples
print(uniform_samples)
stan_model
stan_model <- stan_model("test_uniform.stan")
stan_model
stan_model <- stan_model("test_uniform.stan")
stan_model <- stan_model("test_uniform.stan")
stan_model <- stan_model("test_uniform.stan")
# Compile the Stan model
stan_model <- stan_model("test_uniform.stan")
