segments(x0=x[i,1],x1=PSEmap[i]+JNDmap[i],y0=0.84,lty=2)
segments(x0=x[i,1],x1=PSEmap[i],y0=0.5,lty=2)
segments(y0=0,y1=0.84,x0=PSEmap[i]+JNDmap[i],lty=2)
segments(y0=0,y1=0.5,x0=PSEmap[i],lty=2)
if (i==1 | i==5)
{
axis(2,las=1,yaxp=c(0,1,2))
axis(2,at=0.84,las=1)
}
if (i>4) axis(1)
}
mtext("Proportion 'Long' Response",side=2,line=2,outer=T,cex=1.4)
mtext("Test Interval (ms)",side=1,outer=T,line=3,cex=1.4)
dev.new(width=10,height=5)
layout(matrix(1:nsubjs,2,4,byrow=T))
par(mar=c(1,2,2,0),oma=c(5,5,1,1))
for (i in 1:nsubjs)
{
scale <- seq(x[i,1],x[i,nstim[i]], by=.1)
plot(x[i,],rprop[i,],main=paste("Subject",as.character(i)),xlab="",ylab="",pch=15,col="dark grey",ylim=c(0,1),yaxt="n",xaxt="n")
for (g in 1:20)
{
lines(scale,F3(scale,i,g),type="l",col="light grey")
}
lines(scale,F1(scale,i),type="l")
if (i==1 | i==5) {
axis(2,las=1,yaxp=c(0,1,2))
#axis(2,at=0.84,las=1)
}
if (i>4) axis(1)
}
mtext("Proportion 'Long' Response",side=2,line=2,outer=T,cex=1.4)
mtext("Test Interval (ms)",side=1,outer=T,line=3,cex=1.4)
library(grDevices)
x11(width = 10, height = 5)
x11(width = 10, height = 5)
library(rstan)
model <- "
// Logistic Psychophysical Function
data {
int nsubjs;
int nstim[nsubjs];
int n[nsubjs,28];
int r[nsubjs,28];
int x[nsubjs,28];
vector[nsubjs] xmean;
}
parameters {
real mua;
real mub;
real<lower=0,upper=1000> sigmaa;
real<lower=0,upper=1000> sigmab;
vector[nsubjs] alpha;
vector[nsubjs] beta;
}
model {
// Priors
mua ~ normal(0, inv_sqrt(.001));
mub ~ normal(0, inv_sqrt(.001));
alpha ~ normal(mua, sigmaa);
beta ~ normal(mub, sigmab);
for (i in 1:nsubjs) {
for (j in 1:nstim[i]) {
real theta;
theta <- inv_logit(alpha[i] + beta[i] * (x[i,j] - xmean[i]));
r[i,j] ~ binomial(n[i,j], theta);
}
}
}"
x <- as.matrix(read.table("data_x.txt", sep="\t"))
x[is.na(x)] = -99  # transforming because Stan won't accept NAs
n <- as.matrix(read.table("data_n.txt", sep="\t"))
n[is.na(n)] = -99  # transforming because Stan won't accept NAs
r <- as.matrix(read.table("data_r.txt", sep="\t"))
r[is.na(r)] = -99  # transforming because Stan won't accept NAs
rprop <- as.matrix(read.table("data_rprop.txt", sep="\t"))
xmean <- c(318.888, 311.0417, 284.4444, 301.5909,
296.2000, 305.7692, 294.6429, 280.3571)
nstim <- c(27, 24, 27, 22, 25, 26, 28, 28)
nsubjs <- 8
# to be passed on to Stan
data <- list(x=x, xmean=xmean, n=n, r=r, nsubjs=nsubjs, nstim=nstim)
myinits <- list(
list(alpha=rep(0, nsubjs), beta=rep(0, nsubjs),
mua=0, mub=0, sigmaa=1, sigmab=1),
list(alpha=rep(0, nsubjs), beta=rep(0, nsubjs),
mua=0, mub=0, sigmaa=1, sigmab=1))
parameters <- c("alpha", "beta")  # Parameters to be monitored
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,
pars=parameters,
iter=3000,
chains=2,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
# Transforming back to NAs
x[x == -99] = NA
n[n == -99] = NA
r[r == -99] = NA
# Extracting the parameters
alpha      = extract(samples)$alpha
beta      = extract(samples)$beta
alphaMAP  = c(rep(0,nsubjs))
betaMAP  = c(rep(0,nsubjs))
alpha_sel = matrix(NA,20,8)
beta_sel = matrix(NA,20,8)
# Constructing MAP-estimates and alpha/beta range
for (i in 1:nsubjs)
{
alphaMAP[i]   <- density(alpha[,i])$x[which(density(alpha[,i])$y ==
max(density(alpha[,i])$y))]
betaMAP[i]    <- density(beta[,i])$x[which(density(beta[,i])$y ==
max(density(beta[,i])$y))]
alpha_sel[,i] <- sample(alpha[,i],20)
beta_sel[,i]  <- sample(beta[,i],20)
}
############################## PSYCHOMETRIC FUNCTIONS ##########################
# only the MAP estimate; use this to plot psychometric functions
F1 <- function(X,s)
{
exp(alphaMAP[s] + betaMAP[s]*(X - xmean[s]))/
(1+exp(alphaMAP[s] + betaMAP[s]*(X - xmean[s])))
}
F1inv <- function(Y,s)
{
(log(-Y/(Y-1))-alphaMAP[s])/betaMAP[s]
}
# function for all the posterior alpha/beta values; use this to calculate JND
# posterior
F2 <- function(X,s)
{
exp(alpha[,s] + beta[,s]*(X - xmean[s]))/
(1+exp(alpha[,s] + beta[,s]*(X - xmean[s])))
}
F2inv <- function(Y,s)
{
(log(-Y/(Y-1))-alpha[,s])/beta[,s]
}
# function for 20 grabbed posterior alpha/beta values; use this to plot
# overlapping sigmoids to visualize variance
F3 <- function(X,s,g)
{
exp(alpha_sel[g,s] + beta_sel[g,s]*(X - xmean[s]))/
(1+exp(alpha_sel[g,s] + beta_sel[g,s]*(X - xmean[s])))
}
##################################### JND/PSE calculation #####################
JND    <- F2inv(0.84,c(1:nsubjs))-F2inv(0.5,c(1:nsubjs))
JNDmap <- F1inv(0.84,c(1:nsubjs))-F1inv(0.5,c(1:nsubjs))
PSE    <- F2inv(0.5,c(1:nsubjs))+xmean
PSEmap <- F1inv(0.5,c(1:nsubjs))+xmean
################## PLOTS ####################
### Figure 12.2
dev.new(width=10,height=5)
layout(matrix(1:nsubjs,2,4,byrow=T))
par(mar=c(1,2,2,0),oma=c(5,5,1,1))
for (i in 1:nsubjs)
{
scale <- seq(x[i,1],x[i,nstim[i]], by=.1)
plot(x[i,],rprop[i,],main=paste("Subject",as.character(i)),xlab="",ylab="",
pch=15,col="dark grey",ylim=c(0,1),yaxt="n",xaxt="n")
lines(scale,F1(scale,i),type="l")
segments(x0=x[i,1],x1=PSEmap[i]+JNDmap[i],y0=0.84,lty=2)
segments(x0=x[i,1],x1=PSEmap[i],y0=0.5,lty=2)
segments(y0=0,y1=0.84,x0=PSEmap[i]+JNDmap[i],lty=2)
segments(y0=0,y1=0.5,x0=PSEmap[i],lty=2)
if (i==1 | i==5)
{
axis(2,las=1,yaxp=c(0,1,2))
axis(2,at=0.84,las=1)
}
if (i>4) axis(1)
}
mtext("Proportion 'Long' Response",side=2,line=2,outer=T,cex=1.4)
mtext("Test Interval (ms)",side=1,outer=T,line=3,cex=1.4)
### WARNING: Do not close R window.
dev.new(width=10,height=5)
layout(matrix(1:nsubjs,2,4,byrow=T))
par(mar=c(1,2,2,0),oma=c(5,5,1,1))
for (i in 1:nsubjs)
{
scale <- seq(x[i,1],x[i,nstim[i]], by=.1)
plot(x[i,],rprop[i,],main=paste("Subject",as.character(i)),xlab="",ylab="",pch=15,col="dark grey",ylim=c(0,1),yaxt="n",xaxt="n")
for (g in 1:20)
{
lines(scale,F3(scale,i,g),type="l",col="light grey")
}
lines(scale,F1(scale,i),type="l")
if (i==1 | i==5) {
axis(2,las=1,yaxp=c(0,1,2))
#axis(2,at=0.84,las=1)
}
if (i>4) axis(1)
}
mtext("Proportion 'Long' Response",side=2,line=2,outer=T,cex=1.4)
mtext("Test Interval (ms)",side=1,outer=T,line=3,cex=1.4)
#### PLOT FOR EXERCISE 12.1.4
# Figure
if (os == "Windows") {
windows(width=6, height=4)
} else if (os == "Darwin") {  # macOS
quartz(width=6, height=4)
} else {  # Assume Linux or other Unix-like systems
x11(width=6, height=4)
}
library(rstan)
model <- "
// Logistic Psychophysical Function
data {
int nsubjs;
int nstim[nsubjs];
int n[nsubjs,28];
int r[nsubjs,28];
int x[nsubjs,28];
vector[nsubjs] xmean;
}
parameters {
real mua;
real mub;
real<lower=0,upper=1000> sigmaa;
real<lower=0,upper=1000> sigmab;
vector[nsubjs] alpha;
vector[nsubjs] beta;
}
model {
// Priors
mua ~ normal(0, inv_sqrt(.001));
mub ~ normal(0, inv_sqrt(.001));
alpha ~ normal(mua, sigmaa);
beta ~ normal(mub, sigmab);
for (i in 1:nsubjs) {
for (j in 1:nstim[i]) {
real theta;
theta <- inv_logit(alpha[i] + beta[i] * (x[i,j] - xmean[i]));
r[i,j] ~ binomial(n[i,j], theta);
}
}
}"
x <- as.matrix(read.table("data_x.txt", sep="\t"))
x[is.na(x)] = -99  # transforming because Stan won't accept NAs
n <- as.matrix(read.table("data_n.txt", sep="\t"))
n[is.na(n)] = -99  # transforming because Stan won't accept NAs
r <- as.matrix(read.table("data_r.txt", sep="\t"))
r[is.na(r)] = -99  # transforming because Stan won't accept NAs
rprop <- as.matrix(read.table("data_rprop.txt", sep="\t"))
xmean <- c(318.888, 311.0417, 284.4444, 301.5909,
296.2000, 305.7692, 294.6429, 280.3571)
nstim <- c(27, 24, 27, 22, 25, 26, 28, 28)
nsubjs <- 8
# to be passed on to Stan
data <- list(x=x, xmean=xmean, n=n, r=r, nsubjs=nsubjs, nstim=nstim)
myinits <- list(
list(alpha=rep(0, nsubjs), beta=rep(0, nsubjs),
mua=0, mub=0, sigmaa=1, sigmab=1),
list(alpha=rep(0, nsubjs), beta=rep(0, nsubjs),
mua=0, mub=0, sigmaa=1, sigmab=1))
parameters <- c("alpha", "beta")  # Parameters to be monitored
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,
pars=parameters,
iter=3000,
chains=2,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
# Transforming back to NAs
x[x == -99] = NA
n[n == -99] = NA
r[r == -99] = NA
# Extracting the parameters
alpha      = extract(samples)$alpha
beta      = extract(samples)$beta
alphaMAP  = c(rep(0,nsubjs))
betaMAP  = c(rep(0,nsubjs))
alpha_sel = matrix(NA,20,8)
beta_sel = matrix(NA,20,8)
# Constructing MAP-estimates and alpha/beta range
for (i in 1:nsubjs)
{
alphaMAP[i]   <- density(alpha[,i])$x[which(density(alpha[,i])$y ==
max(density(alpha[,i])$y))]
betaMAP[i]    <- density(beta[,i])$x[which(density(beta[,i])$y ==
max(density(beta[,i])$y))]
alpha_sel[,i] <- sample(alpha[,i],20)
beta_sel[,i]  <- sample(beta[,i],20)
}
############################## PSYCHOMETRIC FUNCTIONS ##########################
# only the MAP estimate; use this to plot psychometric functions
F1 <- function(X,s)
{
exp(alphaMAP[s] + betaMAP[s]*(X - xmean[s]))/
(1+exp(alphaMAP[s] + betaMAP[s]*(X - xmean[s])))
}
F1inv <- function(Y,s)
{
(log(-Y/(Y-1))-alphaMAP[s])/betaMAP[s]
}
# function for all the posterior alpha/beta values; use this to calculate JND
# posterior
F2 <- function(X,s)
{
exp(alpha[,s] + beta[,s]*(X - xmean[s]))/
(1+exp(alpha[,s] + beta[,s]*(X - xmean[s])))
}
F2inv <- function(Y,s)
{
(log(-Y/(Y-1))-alpha[,s])/beta[,s]
}
# function for 20 grabbed posterior alpha/beta values; use this to plot
# overlapping sigmoids to visualize variance
F3 <- function(X,s,g)
{
exp(alpha_sel[g,s] + beta_sel[g,s]*(X - xmean[s]))/
(1+exp(alpha_sel[g,s] + beta_sel[g,s]*(X - xmean[s])))
}
##################################### JND/PSE calculation #####################
JND    <- F2inv(0.84,c(1:nsubjs))-F2inv(0.5,c(1:nsubjs))
JNDmap <- F1inv(0.84,c(1:nsubjs))-F1inv(0.5,c(1:nsubjs))
PSE    <- F2inv(0.5,c(1:nsubjs))+xmean
PSEmap <- F1inv(0.5,c(1:nsubjs))+xmean
################## PLOTS ####################
### Figure 12.2
dev.new(width=10,height=5)
layout(matrix(1:nsubjs,2,4,byrow=T))
par(mar=c(1,2,2,0),oma=c(5,5,1,1))
for (i in 1:nsubjs)
{
scale <- seq(x[i,1],x[i,nstim[i]], by=.1)
plot(x[i,],rprop[i,],main=paste("Subject",as.character(i)),xlab="",ylab="",
pch=15,col="dark grey",ylim=c(0,1),yaxt="n",xaxt="n")
lines(scale,F1(scale,i),type="l")
segments(x0=x[i,1],x1=PSEmap[i]+JNDmap[i],y0=0.84,lty=2)
segments(x0=x[i,1],x1=PSEmap[i],y0=0.5,lty=2)
segments(y0=0,y1=0.84,x0=PSEmap[i]+JNDmap[i],lty=2)
segments(y0=0,y1=0.5,x0=PSEmap[i],lty=2)
if (i==1 | i==5)
{
axis(2,las=1,yaxp=c(0,1,2))
axis(2,at=0.84,las=1)
}
if (i>4) axis(1)
}
mtext("Proportion 'Long' Response",side=2,line=2,outer=T,cex=1.4)
mtext("Test Interval (ms)",side=1,outer=T,line=3,cex=1.4)
### WARNING: Do not close R window.
dev.new(width=10,height=5)
layout(matrix(1:nsubjs,2,4,byrow=T))
par(mar=c(1,2,2,0),oma=c(5,5,1,1))
for (i in 1:nsubjs)
{
scale <- seq(x[i,1],x[i,nstim[i]], by=.1)
plot(x[i,],rprop[i,],main=paste("Subject",as.character(i)),xlab="",ylab="",pch=15,col="dark grey",ylim=c(0,1),yaxt="n",xaxt="n")
for (g in 1:20)
{
lines(scale,F3(scale,i,g),type="l",col="light grey")
}
lines(scale,F1(scale,i),type="l")
if (i==1 | i==5) {
axis(2,las=1,yaxp=c(0,1,2))
#axis(2,at=0.84,las=1)
}
if (i>4) axis(1)
}
mtext("Proportion 'Long' Response",side=2,line=2,outer=T,cex=1.4)
mtext("Test Interval (ms)",side=1,outer=T,line=3,cex=1.4)
#### PLOT FOR EXERCISE 12.1.4
# Figure
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (os == "Windows") {
windows(width=6, height=4)
} else if (os == "Darwin") {  # macOS
quartz(width=6, height=4)
} else {  # Assume Linux or other Unix-like systems
x11(width=6, height=4)
}
layout(matrix(1:nsubjs,2,4,byrow=T))
par(mar=c(1,2,2,0),oma=c(5,5,1,1))
for (i in 1:nsubjs)
{
plot(density(JND[,i]), col="dark grey", type="h", main=paste("Subject",as.character(i)), ylab="", xlab="", xlim=c(10,100), ylim=c(0,0.12), las=1,yaxt="n",xaxt="n")
par(new=F)
if (i==1 | i==5) axis(2,las=1, yaxp=c(0,0.12,3))
if (i>4) axis(1)
}
mtext("Posterior Density",side=2,line=2,outer=T,cex=1.4)
mtext("JND (ms)",side=1,line=3,outer=T,cex=1.4)
# Figure
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (os == "Windows") {
windows(width=6, height=4)
} else if (os == "Darwin") {  # macOS
quartz(width=6, height=4)
} else {  # Assume Linux or other Unix-like systems
x11(width=6, height=4)
}
layout(matrix(1:nsubjs,2,4,byrow=T))
par(mar=c(1,2,2,0),oma=c(5,5,1,1))
for (i in 1:nsubjs)
{
plot(density(JND[,i]), col="dark grey", type="h", main=paste("Subject",as.character(i)), ylab="", xlab="", xlim=c(10,100), ylim=c(0,0.12), las=1,yaxt="n",xaxt="n")
par(new=F)
if (i==1 | i==5) axis(2,las=1, yaxp=c(0,0.12,3))
if (i>4) axis(1)
}
mtext("Posterior Density",side=2,line=2,outer=T,cex=1.4)
mtext("JND (ms)",side=1,line=3,outer=T,cex=1.4)
# install.packages("dplyr")
# Load the necessary library
library(dplyr)
# Parameters
dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/BayesianCognitiveModeling"
log_file_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_log.txt"
checked_source_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_checked.csv"
plot_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling"
# List all .R files recursively
r_files <- list.files(path = dir_path, pattern = "\\.R$", recursive = TRUE, full.names = TRUE)
# Create dataframe to write checking result
if (!file.exists(checked_source_path)) {
df <- data.frame(path = c("Test"), isGood = c(TRUE))
for (r_file in r_files) {
new_row <- data.frame(
path = r_file,
isGood = FALSE
)
df <- rbind(df, new_row)
}
write.csv(df, file = checked_source_path, row.names = FALSE)
checking_files <- r_files
} else {
df <- read.csv(checked_source_path)
filtered_df <- df %>% filter(isGood == TRUE)
checking_files <- r_files[!r_files %in% filtered_df$path]
}
checking_files <- "/Users/seojin/Documents/ComputationalCognitiveModeling/BayesianCognitiveModeling/CaseStudies/PsychophysicalFunctions/PsychophysicalFunction1_Stan.R"
# Function to save plots
save_all_plots <- function(plot_dir, plot_count) {
plot_file <- file.path(plot_dir, paste0("plot_", plot_count, ".png"))
dev.copy(png, filename = plot_file)
dev.off()
}
# Get experiment directory paths
experiment_dir_paths <- unique(dirname(checking_files))
# Loop all experiment directory and run source code.
for (experiment_dir_path in experiment_dir_paths) {
setwd(experiment_dir_path)
r_files <- list.files(path = experiment_dir_path, pattern = "\\.R$", full.names = TRUE)
r_files <- r_files[r_files %in% checking_files]
for (r_file in r_files) {
# Get the R file name from the full path
file_name <- tools::file_path_sans_ext(basename(r_file))
# Define the path to save the plots
plot_dir <- file.path(plot_dir_path, "plots", file_name)
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)  # Ensure all directories in the path are created
}
# Initialize log_conn to avoid reference errors
log_conn <- file(log_file_path, open = "a")
tryCatch({
# Redirect both standard output and error to the log file
sink(log_conn, append = TRUE)
sink(log_conn, append = TRUE, type = "message")
cat(paste("\nSource code is on checking:", r_file))
plot_count <- 1  # Initialize plot count
# Run the R script
source(r_file)
# Save each plot generated during the script execution
if (dev.cur() > 1) {  # If there is an active plot
save_all_plots(plot_dir, plot_count)
plot_count <- plot_count + 1
}
isGood <<- TRUE
}, error = function(e) {
# Error handling, writing directly to the log file
cat("Error in source:", r_file, "\n", conditionMessage(e), "\n", file = log_file_path, append = TRUE)
isGood <<- FALSE
}, finally = {
# Ensure the sinks are reset and the connection is closed
sink()  # Reset the standard output back to the console
sink(type = "message")  # Reset the standard error output back to the console
close(log_conn)  # Close the log file connection
# Write the updated data frame back to the CSV file
df <- read.csv(checked_source_path)
df[df$path == r_file, "isGood"]  <- isGood
write.csv(df, file = checked_source_path, row.names = FALSE)
})
}
}
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (system_info["sysname"] == "Windows") {
windows()
} else {
# Run a different function or do nothing for non-Windows OS
# library(grDevices)
# x11(width = 10, height = 5)
quartz(width = 10, height = 5)
}
isGood
