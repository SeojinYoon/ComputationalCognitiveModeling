dev.copy(png, filename = plot_file)
dev.off()
}
# List all .R files recursively
r_files <- list.files(path = dir_path, pattern = "\\.R$", recursive = TRUE, full.names = TRUE)
# Get experiment directory paths
experiment_dir_paths <- unique(dirname(r_files))
# Loop all experiment directory and run source code.
for (experiment_dir_path in experiment_dir_paths) {
setwd(experiment_dir_path)
r_files <- list.files(path = experiment_dir_path, pattern = "\\.R$", full.names = TRUE)
for (r_file in r_files) {
# Get the R file name from the full path
file_name <- tools::file_path_sans_ext(basename(r_file))
# Define the path to save the plots
plot_dir <- file.path(plot_dir_path, "plots", file_name)
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)  # Ensure all directories in the path are created
}
# Initialize log_conn to avoid reference errors
log_conn <- file(log_file_path, open = "a")
tryCatch({
# Redirect both standard output and error to the log file
sink(log_conn, append = TRUE)
sink(log_conn, append = TRUE, type = "message")
cat(paste("Run source code:", r_file))
plot_count <- 1  # Initialize plot count
# Run the R script
source(r_file)
# Save each plot generated during the script execution
if (dev.cur() > 1) {  # If there is an active plot
save_all_plots(plot_dir, plot_count)
plot_count <- plot_count + 1
}
new_row <- data.frame(
path = r_file,
isGood = TRUE,
)
}, error = function(e) {
# Error handling, writing directly to the log file
cat("Error in source:", r_file, "\n", e, "\n", file = log_file_path, append = TRUE)
new_row <- data.frame(
path = r_file,
isGood = FALSE,
)
# Write the updated data frame back to the CSV file
updated_data <- rbind(df, new_row)
write.csv(updated_data, file = checked_source_path, row.names = FALSE)
}, finally = {
# Ensure the sinks are reset and the connection is closed
sink()  # Reset the standard output back to the console
sink(type = "message")  # Reset the standard error output back to the console
close(log_conn)  # Close the log file connection
})
}
break
}
cat("Error in source:", r_file, "\n", e, "\n", file = log_file_path, append = TRUE)
new_row <- data.frame(
path = r_file,
isGood = FALSE,
)
r_file
new_row <- data.frame(
path = r_file,
isGood = FALSE,
)
new_row <- data.frame(
path = r_file,
isGood = FALSE,
)
new_row <- data.frame(
path = 1,
isGood = FALSE,
)
new_row <- data.frame(
path = 1,
isGood = FALSE,
)
new_row <- data.frame(
path = r_file,
isGood = FALSE,
)
new_row <- data.frame(
path = r_file,
isGood = FALSE,
)
new_row <- data.frame(
path = r_file,
isGood = FALSE
)
new_row <- data.frame(
path = r_file,
isGood = TRUE,
)
new_row <- data.frame(
path = r_file,
isGood = TRUE,
)
# BayesianCognitiveModeling directory path
dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/BayesianCognitiveModeling"
# Log file path
log_file_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_log.txt"
file_removed <- file.remove(log_file_path)
if (file_removed) {
cat("Existed file is removed\n")
}
# Create dataframe to write checking result
checked_source_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_checked.csv"
if (!file.exists(checked_source_path)) {
df <- data.frame(
path = c("Test"),
isGood = c(TRUE)
)
write.csv(df, file = checked_source_path, row.names = FALSE)
} else {
df <- read.csv(checked_source_path)
}
# Plot path
plot_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling"
# Function to save plots
save_all_plots <- function(plot_dir, plot_count) {
plot_file <- file.path(plot_dir, paste0("plot_", plot_count, ".png"))
dev.copy(png, filename = plot_file)
dev.off()
}
# List all .R files recursively
r_files <- list.files(path = dir_path, pattern = "\\.R$", recursive = TRUE, full.names = TRUE)
# Get experiment directory paths
experiment_dir_paths <- unique(dirname(r_files))
# Loop all experiment directory and run source code.
for (experiment_dir_path in experiment_dir_paths) {
setwd(experiment_dir_path)
r_files <- list.files(path = experiment_dir_path, pattern = "\\.R$", full.names = TRUE)
for (r_file in r_files) {
# Get the R file name from the full path
file_name <- tools::file_path_sans_ext(basename(r_file))
# Define the path to save the plots
plot_dir <- file.path(plot_dir_path, "plots", file_name)
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)  # Ensure all directories in the path are created
}
# Initialize log_conn to avoid reference errors
log_conn <- file(log_file_path, open = "a")
tryCatch({
# Redirect both standard output and error to the log file
sink(log_conn, append = TRUE)
sink(log_conn, append = TRUE, type = "message")
cat(paste("Run source code:", r_file))
plot_count <- 1  # Initialize plot count
# Run the R script
source(r_file)
# Save each plot generated during the script execution
if (dev.cur() > 1) {  # If there is an active plot
save_all_plots(plot_dir, plot_count)
plot_count <- plot_count + 1
}
isGood = TRUE
}, error = function(e) {
# Error handling, writing directly to the log file
cat("Error in source:", r_file, "\n", e, "\n", file = log_file_path, append = TRUE)
isGood = FALSE
}, finally = {
# Ensure the sinks are reset and the connection is closed
sink()  # Reset the standard output back to the console
sink(type = "message")  # Reset the standard error output back to the console
close(log_conn)  # Close the log file connection
# Write the updated data frame back to the CSV file
new_row <- data.frame(
path = r_file,
isGood = isGood,
)
updated_data <- rbind(df, new_row)
write.csv(updated_data, file = checked_source_path, row.names = FALSE)
})
}
break
}
new_row <- data.frame(
path = r_file,
isGood = isGood,
)
new_row <- data.frame(
path = r_file,
isGood = isGood,
)
new_row <- data.frame(
path = r_file,
isGood = isGood,
)
new_row <- data.frame(
path = r_file,
isGood = isGood
)
# BayesianCognitiveModeling directory path
dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/BayesianCognitiveModeling"
# Log file path
log_file_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_log.txt"
file_removed <- file.remove(log_file_path)
if (file_removed) {
cat("Existed file is removed\n")
}
# Create dataframe to write checking result
checked_source_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_checked.csv"
if (!file.exists(checked_source_path)) {
df <- data.frame(
path = c("Test"),
isGood = c(TRUE)
)
write.csv(df, file = checked_source_path, row.names = FALSE)
} else {
df <- read.csv(checked_source_path)
}
# Plot path
plot_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling"
# Function to save plots
save_all_plots <- function(plot_dir, plot_count) {
plot_file <- file.path(plot_dir, paste0("plot_", plot_count, ".png"))
dev.copy(png, filename = plot_file)
dev.off()
}
# List all .R files recursively
r_files <- list.files(path = dir_path, pattern = "\\.R$", recursive = TRUE, full.names = TRUE)
# Get experiment directory paths
experiment_dir_paths <- unique(dirname(r_files))
# Loop all experiment directory and run source code.
for (experiment_dir_path in experiment_dir_paths) {
setwd(experiment_dir_path)
r_files <- list.files(path = experiment_dir_path, pattern = "\\.R$", full.names = TRUE)
for (r_file in r_files) {
# Get the R file name from the full path
file_name <- tools::file_path_sans_ext(basename(r_file))
# Define the path to save the plots
plot_dir <- file.path(plot_dir_path, "plots", file_name)
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)  # Ensure all directories in the path are created
}
# Initialize log_conn to avoid reference errors
log_conn <- file(log_file_path, open = "a")
tryCatch({
# Redirect both standard output and error to the log file
sink(log_conn, append = TRUE)
sink(log_conn, append = TRUE, type = "message")
cat(paste("Run source code:", r_file))
plot_count <- 1  # Initialize plot count
# Run the R script
source(r_file)
# Save each plot generated during the script execution
if (dev.cur() > 1) {  # If there is an active plot
save_all_plots(plot_dir, plot_count)
plot_count <- plot_count + 1
}
isGood = TRUE
}, error = function(e) {
# Error handling, writing directly to the log file
cat("Error in source:", r_file, "\n", e, "\n", file = log_file_path, append = TRUE)
isGood = FALSE
}, finally = {
# Ensure the sinks are reset and the connection is closed
sink()  # Reset the standard output back to the console
sink(type = "message")  # Reset the standard error output back to the console
close(log_conn)  # Close the log file connection
# Write the updated data frame back to the CSV file
new_row <- data.frame(
path = r_file,
isGood = isGood
)
updated_data <- rbind(df, new_row)
write.csv(updated_data, file = checked_source_path, row.names = FALSE)
})
}
break
}
# BayesianCognitiveModeling directory path
dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/BayesianCognitiveModeling"
# Log file path
log_file_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_log.txt"
file_removed <- file.remove(log_file_path)
if (file_removed) {
cat("Existed file is removed\n")
}
# Create dataframe to write checking result
checked_source_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_checked.csv"
if (!file.exists(checked_source_path)) {
df <- data.frame(
path = c("Test"),
isGood = c(TRUE)
)
write.csv(df, file = checked_source_path, row.names = FALSE)
} else {
df <- read.csv(checked_source_path)
}
# Plot path
plot_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling"
# Function to save plots
save_all_plots <- function(plot_dir, plot_count) {
plot_file <- file.path(plot_dir, paste0("plot_", plot_count, ".png"))
dev.copy(png, filename = plot_file)
dev.off()
}
# List all .R files recursively
r_files <- list.files(path = dir_path, pattern = "\\.R$", recursive = TRUE, full.names = TRUE)
# Get experiment directory paths
experiment_dir_paths <- unique(dirname(r_files))
# Loop all experiment directory and run source code.
for (experiment_dir_path in experiment_dir_paths) {
setwd(experiment_dir_path)
r_files <- list.files(path = experiment_dir_path, pattern = "\\.R$", full.names = TRUE)
for (r_file in r_files) {
# Get the R file name from the full path
file_name <- tools::file_path_sans_ext(basename(r_file))
# Define the path to save the plots
plot_dir <- file.path(plot_dir_path, "plots", file_name)
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)  # Ensure all directories in the path are created
}
# Initialize log_conn to avoid reference errors
log_conn <- file(log_file_path, open = "a")
tryCatch({
# Redirect both standard output and error to the log file
sink(log_conn, append = TRUE)
sink(log_conn, append = TRUE, type = "message")
cat(paste("Run source code:", r_file))
plot_count <- 1  # Initialize plot count
# Run the R script
source(r_file)
# Save each plot generated during the script execution
if (dev.cur() > 1) {  # If there is an active plot
save_all_plots(plot_dir, plot_count)
plot_count <- plot_count + 1
}
isGood = TRUE
}, error = function(e) {
# Error handling, writing directly to the log file
cat("Error in source:", r_file, "\n", e, "\n", file = log_file_path, append = TRUE)
isGood = FALSE
}, finally = {
# Ensure the sinks are reset and the connection is closed
sink()  # Reset the standard output back to the console
sink(type = "message")  # Reset the standard error output back to the console
close(log_conn)  # Close the log file connection
# Write the updated data frame back to the CSV file
new_row <- data.frame(
path = r_file,
isGood = isGood
)
updated_data <- rbind(df, new_row)
write.csv(updated_data, file = checked_source_path, row.names = FALSE)
})
}
break
}
# BayesianCognitiveModeling directory path
dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/BayesianCognitiveModeling"
# Log file path
log_file_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_log.txt"
file_removed <- file.remove(log_file_path)
if (file_removed) {
cat("Existed file is removed\n")
}
# Create dataframe to write checking result
checked_source_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_checked.csv"
if (!file.exists(checked_source_path)) {
df <- data.frame(
path = c("Test"),
isGood = c(TRUE)
)
write.csv(df, file = checked_source_path, row.names = FALSE)
} else {
df <- read.csv(checked_source_path)
}
# Plot path
plot_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling"
# Function to save plots
save_all_plots <- function(plot_dir, plot_count) {
plot_file <- file.path(plot_dir, paste0("plot_", plot_count, ".png"))
dev.copy(png, filename = plot_file)
dev.off()
}
# List all .R files recursively
r_files <- list.files(path = dir_path, pattern = "\\.R$", recursive = TRUE, full.names = TRUE)
# Get experiment directory paths
experiment_dir_paths <- unique(dirname(r_files))
# Loop all experiment directory and run source code.
for (experiment_dir_path in experiment_dir_paths) {
setwd(experiment_dir_path)
r_files <- list.files(path = experiment_dir_path, pattern = "\\.R$", full.names = TRUE)
for (r_file in r_files) {
# Get the R file name from the full path
file_name <- tools::file_path_sans_ext(basename(r_file))
# Define the path to save the plots
plot_dir <- file.path(plot_dir_path, "plots", file_name)
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)  # Ensure all directories in the path are created
}
# Initialize log_conn to avoid reference errors
log_conn <- file(log_file_path, open = "a")
tryCatch({
# Redirect both standard output and error to the log file
sink(log_conn, append = TRUE)
sink(log_conn, append = TRUE, type = "message")
cat(paste("Run source code:", r_file))
plot_count <- 1  # Initialize plot count
# Run the R script
source(r_file)
# Save each plot generated during the script execution
if (dev.cur() > 1) {  # If there is an active plot
save_all_plots(plot_dir, plot_count)
plot_count <- plot_count + 1
}
isGood = TRUE
}, error = function(e) {
# Error handling, writing directly to the log file
cat("Error in source:", r_file, "\n", e, "\n")
isGood = FALSE
}, finally = {
# Ensure the sinks are reset and the connection is closed
sink()  # Reset the standard output back to the console
sink(type = "message")  # Reset the standard error output back to the console
close(log_conn)  # Close the log file connection
cat("AA:", r_file)
# Write the updated data frame back to the CSV file
new_row <- data.frame(
path = r_file,
isGood = isGood
)
updated_data <- rbind(df, new_row)
write.csv(updated_data, file = checked_source_path, row.names = FALSE)
})
}
break
}
# BayesianCognitiveModeling directory path
dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/BayesianCognitiveModeling"
# Log file path
log_file_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_log.txt"
file_removed <- file.remove(log_file_path)
if (file_removed) {
cat("Existed file is removed\n")
}
# Create dataframe to write checking result
checked_source_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_checked.csv"
if (!file.exists(checked_source_path)) {
df <- data.frame(
path = c("Test"),
isGood = c(TRUE)
)
write.csv(df, file = checked_source_path, row.names = FALSE)
} else {
df <- read.csv(checked_source_path)
}
# Plot path
plot_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling"
# Function to save plots
save_all_plots <- function(plot_dir, plot_count) {
plot_file <- file.path(plot_dir, paste0("plot_", plot_count, ".png"))
dev.copy(png, filename = plot_file)
dev.off()
}
# List all .R files recursively
r_files <- list.files(path = dir_path, pattern = "\\.R$", recursive = TRUE, full.names = TRUE)
# Get experiment directory paths
experiment_dir_paths <- unique(dirname(r_files))
# Loop all experiment directory and run source code.
for (experiment_dir_path in experiment_dir_paths) {
setwd(experiment_dir_path)
r_files <- list.files(path = experiment_dir_path, pattern = "\\.R$", full.names = TRUE)
for (r_file in r_files) {
# Get the R file name from the full path
file_name <- tools::file_path_sans_ext(basename(r_file))
# Define the path to save the plots
plot_dir <- file.path(plot_dir_path, "plots", file_name)
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)  # Ensure all directories in the path are created
}
# Initialize log_conn to avoid reference errors
log_conn <- file(log_file_path, open = "a")
tryCatch({
# Redirect both standard output and error to the log file
sink(log_conn, append = TRUE)
sink(log_conn, append = TRUE, type = "message")
cat(paste("Run source code:", r_file))
plot_count <- 1  # Initialize plot count
# Run the R script
source(r_file)
# Save each plot generated during the script execution
if (dev.cur() > 1) {  # If there is an active plot
save_all_plots(plot_dir, plot_count)
plot_count <- plot_count + 1
}
isGood = TRUE
}, error = function(e) {
# Error handling, writing directly to the log file
cat("Error in source:", r_file, "\n", e, "\n", file = log_file_path, append = TRUE)
isGood = FALSE
}, finally = {
# Ensure the sinks are reset and the connection is closed
sink()  # Reset the standard output back to the console
sink(type = "message")  # Reset the standard error output back to the console
close(log_conn)  # Close the log file connection
cat("AA:", r_file, file = log_file_path, append = TRUE)
# Write the updated data frame back to the CSV file
new_row <- data.frame(
path = r_file,
isGood = isGood
)
updated_data <- rbind(df, new_row)
write.csv(updated_data, file = checked_source_path, row.names = FALSE)
})
}
break
}
