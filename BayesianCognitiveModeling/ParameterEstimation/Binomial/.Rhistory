data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=4000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
data
data$m = 5
myinits <- list(
list(theta=.5))
parameters <- c("theta", "n")
samples <- stan(file="Survey.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=4000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
samples <- stan(file="Survey.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=4000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
samples <- stan(file="Survey.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=4000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
samples <- stan(file="Survey.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=4000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
theta <- extract(samples)$theta
n <- extract(samples)$n
cc <- -Inf
ind <- 0
for (i in 1:length(n)) {
logL <- 0
for(j in 1:data$m) {
logL <- logL+lgamma(n[i]+1)-lgamma(data$k[j]+1)-lgamma(n[i]-data$k[j]+1)
logL <- logL+data$k[j]*log(theta[i])+(n[i]-data$k[j])*log(1-theta[i])
}
if (logL>cc) {
ind <- i
cc <- logL
}
}
layout(matrix(c(2,0,1,3),2,2,byrow=T), width=c(2/3, 1/3), heights=c(1/3, 2/3))
xhist <- hist(n, plot=F)
yhist <- hist(theta, plot=F)
top <- max(c(xhist$counts, yhist$counts))
xrange <- c(0, data$nmax)
yrange <- c(0, 1)
par(mar=c(5, 5, 1, 1))
plot(n, theta, xlim=xrange, ylim=yrange,ylab="", xlab="")
axis(1)
mtext("Number of Surveys", side=1,line=2.25, cex=1.2)
axis(2, cex=1.2)
las=0
mtext("Rate of Return", side=2 ,line=2.25, cex=1.2)
las=1
points(mean(n), mean(theta), col="red", lwd=3, pch=4) #expectation
points(n[ind], theta[ind], col="green", lwd=3, pch=10) #Maximum Likelihood
par(mar=c(0, 4, 1, 1))
barplot(xhist$counts, axes=FALSE, ylim=c(0, top), space=0,col="lightblue")
par(mar=c(4, 0, 1, 3))
barplot(yhist$counts, axes=FALSE, xlim=c(0, top), space=0, horiz=TRUE,
col="lightblue")
rm(list=ls())
library(rstan)
# to be passed on to Stan
data <- read_rdump("Rate_4.data.R")
# Uncomment for Trompetter Data
# data <- read_rdump("Rate_4b.data.R")
myinits <- list(
list(theta=.5, thetaprior=.5))
# The following command calls Stan with specific options.
# For a detailed description type "?stan".
samples <- stan(file="Rate_4.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
print(samples)
# clears workspace:
rm(list=ls())
library(rstan)
# to be passed on to Stan
data <- read_rdump("Rate_4.data.R")
# Uncomment for Trompetter Data
# data <- read_rdump("Rate_4b.data.R")
myinits <- list(
list(theta=.5, thetaprior=.5))
# parameters to be monitored:
parameters <- c("theta", "thetaprior", "postpredk", "priorpredk")
# The following command calls Stan with specific options.
# For a detailed description type "?stan".
samples <- stan(file="Rate_4.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
print(samples)
print(samples)
theta   <- extract(samples)$theta
thetaprior  <- extract(samples)$thetaprior
priorpredk  <- extract(samples)$priorpredk
postpredk   <- extract(samples)$postpredk
layout(matrix(c(1,2),2,1))
layout.show(2)
plot(density(theta, from=0, to=1), zero.line=F, axes=F, main="", xlab="",
ylab="", xlim=c(0,1), ylim=c(0,6))
axis(1, at=c(0,0.2,0.4,0.6,0.8,1), lab=c("0","0.2","0.4","0.6","0.8","1"),
cex.axis=0.8)
mtext("Rate", side=1, line=2.25, cex=1.2)
axis(2, at=c(0,2,4,6),cex.axis=0.8)
mtext("Density", side=2, line=2.25, cex=1.2)
lines(density(thetaprior, from=0, to=1), lty=3, col="gray")
legend(0.6,5.75, c("Prior", "Posterior"), lty=c(3,1), col=c ("grey", "black"))
mybreaks <- seq(from=-.5,to=data$n+1,by=1)
my.at    <- seq(from=0,to=data$n,by=1)
hist(postpredk,breaks=mybreaks,freq=F, right=F, ylab="", xlab="", ylim=c(0,0.3),
main="", axes=F )
axis(1, at=my.at,lab=my.at,cex.axis=0.8)
mtext("Success Count", side=1, line=2.25, cex=1.2)
axis(2,at=c(0,0.1,0.2,0.3),lab=c("0","0.1","0.2","0.3"),cex.axis=0.8)
mtext("Mass", side=2, line=2.25, cex=1.2)
hist(priorpredk, breaks=mybreaks,freq=F,right=F,add=T, lty=3,border="grey")
legend(8,0.3, c("Prior", "Posterior"), lty=c(3,1),col=c("grey", "black"))
# clears workspace:
rm(list=ls())
library(rstan)
# to be passed on to Stan
data <- read_rdump("Rate_5.data.R")
myinits <- list(
list(theta=.5))
# parameters to be monitored:
parameters <- c("theta", "postpredk1", "postpredk2")
# The following command calls Stan with specific options.
# For a detailed description type "?stan".
samples <- stan(file="Rate_5.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=10000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
print(samples)
# clears workspace:
rm(list=ls())
library(rstan)
#### Notes to Stan model #######################################################
## 1) If parameter's prior distribution is not specified, Stan will assume that
##    you want it to be distributed uniformly with boundaries given by variable
##    constraints. Here constrains <lower=0,upper=10> give uniform (0, 100)
## 2) In Stan, most of the sampling statements can be vectorized. In this example
##    you can see it in the statement for vector x. Instead of using for loop for
##    each element of the vector, we can simple write it as above. This saves code,
##    speeds up computation. For more information read Vectorization chapter in
##    the Stan manual (p.231 in version 2.4.0)
################################################################################
model <- "
// Inferring the Mean and Standard Deviation of a Gaussian
data {
int<lower=1> n;
vector<lower=0>[n] x;
}
parameters {
real mu;
real<lower=0,upper=10> sigma;
}
model {
// Priors
mu ~ normal(0, sqrt(1000));
// Data Come From A Gaussian
x ~ normal(mu, sigma);
}"
x <- c(1.1, 1.9, 2.3, 1.8)
n <- length(x)
data <- list(x=x, n=n) # to be passed on to Stan
myinits <- list(
list(mu=0, sigma=1))
# parameters to be monitored:
parameters <- c("mu", "sigma")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=10000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
mu <- extract(samples)$mu
sigma <- extract(samples)$sigma
sigma
# clears workspace:
rm(list=ls())
library(rstan)
#### Notes to Stan model #######################################################
## 1) We used implicit uniform distribution for sigma and vector mu
## 2) The second loop in this model (1:m) is not necessary here. You can try to
##    remove it, but don't forget to remove its index j. Remember vectorization!
################################################################################
model <- "
// Repeated Measures of IQ
data {
int<lower=1> n;
int<lower=1> m;
matrix[n, m] x;
}
parameters {
vector<lower=0,upper=300>[n] mu;
real<lower=0,upper=100> sigma;
}
model {
// Data Come From Gaussians With Different Means But Common Standard Deviation
for (i in 1:n)
for (j in 1:m)
x[i,j] ~ normal(mu[i], sigma);
}"
x <- matrix(c(90, 95, 100, 105, 110, 115, 150, 155, 160),
nrow=3, ncol=3, byrow=T)
x
n <- nrow(x) # number of people
m <- ncol(x) # number of repeated measurements
data <- list(x=x, n=n, m=m) # to be passed on to Stan
myinits <- list(
list(mu=rep(100, n), sigma=1))
# parameters to be monitored:
parameters <- c("mu", "sigma")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=2000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
# clears workspace:
rm(list=ls())
library(rstan)
model <- "
// The Seven Scientists
data {
int<lower=1> n;
vector[n] x;
}
parameters {
real mu;
vector<lower=0>[n] lambda;
}
transformed parameters {
vector[n] sigma;
for (i in 1:n)
sigma[i] <- inv_sqrt(lambda[i]);
}
model {
// Priors
mu ~ normal(0, sqrt(1000));
lambda ~ gamma(.001, .001);
// Data Come From Gaussians With Common Mean But Different Precisions
x ~ normal(mu, sigma);
}"
x <- c(-27.020, 3.570, 8.191, 9.898, 9.603, 9.945, 10.056)
n <- length(x)
data <- list(x=x, n=n) # to be passed on to Stan
myinits <- list(
list(mu=0, lambda=rep(1,n)))
# parameters to be monitored:
parameters <- c("mu", "sigma")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
samples
# clears workspace:
rm(list=ls())
library(rstan)
model <- "
// Cheating Latent Mixture Model
data {
int<lower=1> n;
int<lower=1> p;
int<lower=1,upper=n> k[p];
int<lower=0,upper=1> truth[p];
}
parameters {
real<lower=0,upper=1> phi;
real<lower=0,upper=1> mubon;
real<lower=0> mudiff;
real<lower=5,upper=50> lambdabon;
real<lower=5,upper=50> lambdache;
vector<lower=0,upper=1>[p] theta;
}
transformed parameters {
vector[2] lp_parts[p];
vector<lower=0>[2] alpha;
vector<lower=0>[2] beta;
real<lower=0,upper=1> muche;
// Additivity on Logit Scale
muche <- inv_logit(logit(mubon) + mudiff);
// Transformation to Group Mean and Precision
alpha[1] <- mubon * lambdabon;
beta[1] <- lambdabon * (1 - mubon);
alpha[2] <- muche * lambdache;
beta[2]  <- lambdache * (1 - muche);
// Data are Binomial with Rate Given by
// Each Person’s Group Assignment
for (i in 1:p) {
lp_parts[i,1] <- log1m(phi) + beta_log(theta[i], alpha[1], beta[1]);
lp_parts[i,2] <- log(phi) + beta_log(theta[i], alpha[2], beta[2]);
}
}
model {
// Priors
mubon ~ beta(1, 1);  // can be removed
mudiff ~ normal(0, 1 / sqrt(.5))T[0,];  // Constrained to be Positive
// Relatively Uninformative Prior on Base Rate
phi ~ beta(5, 5);
for (i in 1:p)
increment_log_prob(log_sum_exp(lp_parts[i]));
k ~ binomial(n, theta);
}
generated quantities {
int<lower=0,upper=1> z[p];
real pc;
vector[p] pct;
for (i in 1:p) {
vector[2] prob;
prob <- softmax(lp_parts[i]);
// Each Person Belongs to One of Two Latent Groups
z[i] <- bernoulli_rng(prob[2]);
// Correct Count
pct[i] <- if_else(z[i] == truth[i], 1, 0);
}
pc <- sum(pct);
}"
cheat.dat  <- read.table("cheat.csv", header=F, sep=",")
# clears workspace:
rm(list=ls())
library(rstan)
data <- read_rdump("Survey.data.R")
myinits <- list(
list(theta=.5))
# parameters to be monitored:
parameters <- c("theta", "n")
samples <- stan(file="Survey.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=4000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
theta <- extract(samples)$theta
n <- extract(samples)$n
## First calculate MLE:
cc <- -Inf
ind <- 0
for (i in 1:length(n)) {
logL <- 0
for(j in 1:data$m) {
logL <- logL+lgamma(n[i]+1)-lgamma(data$k[j]+1)-lgamma(n[i]-data$k[j]+1)
logL <- logL+data$k[j]*log(theta[i])+(n[i]-data$k[j])*log(1-theta[i])
}
if (logL>cc) {
ind <- i
cc <- logL
}
}
layout(matrix(c(2,0,1,3),2,2,byrow=T), width=c(2/3, 1/3), heights=c(1/3, 2/3))
xhist <- hist(n, plot=F)
yhist <- hist(theta, plot=F)
top <- max(c(xhist$counts, yhist$counts))
xrange <- c(0, data$nmax)
yrange <- c(0, 1)
par(mar=c(5, 5, 1, 1))
plot(n, theta, xlim=xrange, ylim=yrange,ylab="", xlab="")
axis(1)
mtext("Number of Surveys", side=1,line=2.25, cex=1.2)
axis(2, cex=1.2)
las=0
mtext("Rate of Return", side=2 ,line=2.25, cex=1.2)
las=1
points(mean(n), mean(theta), col="red", lwd=3, pch=4) #expectation
points(n[ind], theta[ind], col="green", lwd=3, pch=10) #Maximum Likelihood
par(mar=c(0, 4, 1, 1))
barplot(xhist$counts, axes=FALSE, ylim=c(0, top), space=0,col="lightblue")
par(mar=c(4, 0, 1, 3))
barplot(yhist$counts, axes=FALSE, xlim=c(0, top), space=0, horiz=TRUE,
col="lightblue")
plot(n, theta, xlim=xrange, ylim=yrange,ylab="", xlab="")
theta
n
xrange
par(mar=c(5, 5, 1, 1))
plot(n, theta, xlim=xrange, ylim=yrange,ylab="", xlab="")
plot(n, theta, xlim=xrange, ylim=yrange,ylab="", xlab="")
# clears workspace:
rm(list=ls())
library(rstan)
# to be passed on to Stan
data <- read_rdump("Rate_5.data.R")
myinits <- list(
list(theta=.5))
# parameters to be monitored:
parameters <- c("theta", "postpredk1", "postpredk2")
# The following command calls Stan with specific options.
# For a detailed description type "?stan".
samples <- stan(file="Rate_5.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=10000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
print(samples)
theta      <- extract(samples)$theta
postpredk1 <- extract(samples)$postpredk1
postpredk2 <- extract(samples)$postpredk2
# Two-panel plot.
layout(matrix(c(1,2),1,2))
layout.show(2)
# First, a histogram for theta.
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
Nbreaks <- 80
y       <- hist(theta, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=1,
xlim=c(0,1), ylim=c(0,10), xlab="Theta", ylab="Density")
# let's plot a density estimate over this:
lines(density(theta), col="red", lwd=2)
# Second plot, the data space (predictives)
plot(data$k1, data$k2, type="p", pch=4, cex=2, lwd=2, xlab="Success Count 1",
ylab="Success Count 2", xlim=c(-1, data$n1+1), ylim=c(-1, data$n2+1))
nsamples <- length(theta)
sc <- 10
for (i in 0:data$n1)
{
for (j in 0:data$n2)
{
match.preds <- sum(postpredk1==i & postpredk2==j)/nsamples
if (match.preds > 0)
{
points(i,j, pch=0, cex=sc*sqrt(match.preds))
}
}
}
