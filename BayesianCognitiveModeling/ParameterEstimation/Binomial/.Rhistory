plot_file <- file.path(plot_dir, paste0("plot_", plot_count, ".png"))
dev.copy(png, filename = plot_file)
dev.off()
}
# Get experiment directory paths
experiment_dir_paths <- unique(dirname(checking_files))
# Loop all experiment directory and run source code.
for (experiment_dir_path in experiment_dir_paths) {
setwd(experiment_dir_path)
r_files <- list.files(path = experiment_dir_path, pattern = "\\.R$", full.names = TRUE)
r_files <- r_files[r_files %in% checking_files]
for (r_file in r_files) {
# Get the R file name from the full path
file_name <- tools::file_path_sans_ext(basename(r_file))
# Define the path to save the plots
plot_dir <- file.path(plot_dir_path, "plots", file_name)
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)  # Ensure all directories in the path are created
}
# Initialize log_conn to avoid reference errors
log_conn <- file(log_file_path, open = "a")
tryCatch({
# Redirect both standard output and error to the log file
sink(log_conn, append = TRUE)
sink(log_conn, append = TRUE, type = "message")
cat(paste("\nSource code is on checking:", r_file))
plot_count <- 1  # Initialize plot count
# Run the R script
source(r_file)
# Save each plot generated during the script execution
if (dev.cur() > 1) {  # If there is an active plot
save_all_plots(plot_dir, plot_count)
plot_count <- plot_count + 1
}
isGood <<- TRUE
}, error = function(e) {
# Error handling, writing directly to the log file
cat("Error in source:", r_file, "\n", conditionMessage(e), "\n", file = log_file_path, append = TRUE)
isGood <<- FALSE
}, finally = {
# Ensure the sinks are reset and the connection is closed
sink()  # Reset the standard output back to the console
sink(type = "message")  # Reset the standard error output back to the console
close(log_conn)  # Close the log file connection
# Write the updated data frame back to the CSV file
df <- read.csv(checked_source_path)
df[df$path == r_file, "isGood"]  <- isGood
write.csv(df, file = checked_source_path, row.names = FALSE)
})
}
}
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (system_info["sysname"] == "Windows") {
windows()
} else {
# Run a different function or do nothing for non-Windows OS
# library(grDevices)
# x11(width = 10, height = 5)
quartz(width = 10, height = 5)
}
isGood
library(rstan)
data <- read_rdump("Rate_2.data.R")  # to be passed on to Stan
myinits <- list(
list(theta1=0.1, theta2=0.9))
# parameters to be monitored:
parameters <- c("delta", "theta1", "theta2")
# The following command calls Stan with specific options.
# For a detailed description type "?stan".
samples <- stan(file="Rate_2.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=1,
thin=1,
# warmup=100,  # Stands for burn-in; Default = iter/2
# seed=123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
print(samples)
# Collect posterior samples:
delta <- extract(samples)$delta
# Figure
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (system_info["sysname"] == "Windows") {
windows(width=6, height=4)
} else {
# Run a different function or do nothing for non-Windows OS
# library(grDevices)
# x11(width=6, height=4)
quartz(width=6, height=4)
}
# Now let's plot a histogram for delta.
# First, some options to make the plot look better:
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
Nbreaks <- 80
y       <- hist(delta, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=1,
xlim=c(-1,1), ylim=c(0,10), xlab="Difference in Rates",
ylab="Posterior Density")
# mean of delta:
mean(delta)
# median of delta:
median(delta)
# mode of delta, estimated from the "density" smoother:
density(delta)$x[which(density(delta)$y==max(density(delta)$y))]
# 95% credible interval for delta:
quantile(delta, c(.025,.975))
library(rstan)
data <- read_rdump("Rate_3.data.R")  # to be passed on to Stan
myinits <- list(
list(theta=0.5))
# parameters to be monitored:
parameters <- c("theta")
# The following command calls Stan with specific options.
# For a detailed description type "?stan".
samples <- stan(file="Rate_3.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
print(samples)
theta <- extract(samples)$theta
# Figure
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (system_info["sysname"] == "Windows") {
windows(width=6, height=4)
} else {
# Run a different function or do nothing for non-Windows OS
# library(grDevices)
# x11(width=6, height=4)
quartz(width=6, height=4)
}
# Now let's plot a histogram for theta.
# First, some options to make the plot look better:
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
Nbreaks <- 80
y       <- hist(theta, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=1,
xlim=c(0,1), ylim=c(0,10), xlab="Rate", ylab="Posterior Density")
# install.packages("dplyr")
# Load the necessary library
library(dplyr)
# Parameters
dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/BayesianCognitiveModeling"
log_file_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_log.txt"
checked_source_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_checked.csv"
plot_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling"
# List all .R files recursively
r_files <- list.files(path = dir_path, pattern = "\\.R$", recursive = TRUE, full.names = TRUE)
# Create dataframe to write checking result
if (!file.exists(checked_source_path)) {
df <- data.frame(path = c("Test"), isGood = c(TRUE))
for (r_file in r_files) {
new_row <- data.frame(
path = r_file,
isGood = FALSE
)
df <- rbind(df, new_row)
}
write.csv(df, file = checked_source_path, row.names = FALSE)
checking_files <- r_files
} else {
df <- read.csv(checked_source_path)
filtered_df <- df %>% filter(isGood == TRUE)
checking_files <- r_files[!r_files %in% filtered_df$path]
}
checking_files <- "/Users/seojin/Documents/ComputationalCognitiveModeling/BayesianCognitiveModeling/ParameterEstimation/Binomial/Rate_2_Stan.R"
# Function to save plots
save_all_plots <- function(plot_dir, plot_count) {
plot_file <- file.path(plot_dir, paste0("plot_", plot_count, ".png"))
dev.copy(png, filename = plot_file)
dev.off()
}
# Get experiment directory paths
experiment_dir_paths <- unique(dirname(checking_files))
# Loop all experiment directory and run source code.
for (experiment_dir_path in experiment_dir_paths) {
setwd(experiment_dir_path)
r_files <- list.files(path = experiment_dir_path, pattern = "\\.R$", full.names = TRUE)
r_files <- r_files[r_files %in% checking_files]
for (r_file in r_files) {
# Get the R file name from the full path
file_name <- tools::file_path_sans_ext(basename(r_file))
# Define the path to save the plots
plot_dir <- file.path(plot_dir_path, "plots", file_name)
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)  # Ensure all directories in the path are created
}
# Initialize log_conn to avoid reference errors
log_conn <- file(log_file_path, open = "a")
tryCatch({
# Redirect both standard output and error to the log file
sink(log_conn, append = TRUE)
sink(log_conn, append = TRUE, type = "message")
cat(paste("\nSource code is on checking:", r_file))
plot_count <- 1  # Initialize plot count
# Run the R script
source(r_file)
# Save each plot generated during the script execution
if (dev.cur() > 1) {  # If there is an active plot
save_all_plots(plot_dir, plot_count)
plot_count <- plot_count + 1
}
isGood <<- TRUE
}, error = function(e) {
# Error handling, writing directly to the log file
cat("Error in source:", r_file, "\n", conditionMessage(e), "\n", file = log_file_path, append = TRUE)
isGood <<- FALSE
}, finally = {
# Ensure the sinks are reset and the connection is closed
sink()  # Reset the standard output back to the console
sink(type = "message")  # Reset the standard error output back to the console
close(log_conn)  # Close the log file connection
# Write the updated data frame back to the CSV file
df <- read.csv(checked_source_path)
df[df$path == r_file, "isGood"]  <- isGood
write.csv(df, file = checked_source_path, row.names = FALSE)
})
}
}
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (system_info["sysname"] == "Windows") {
windows()
} else {
# Run a different function or do nothing for non-Windows OS
# library(grDevices)
# x11(width = 10, height = 5)
quartz(width = 10, height = 5)
}
# install.packages("dplyr")
# Load the necessary library
library(dplyr)
# Parameters
dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/BayesianCognitiveModeling"
log_file_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_log.txt"
checked_source_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling_checked.csv"
plot_dir_path <- "/Users/seojin/Documents/ComputationalCognitiveModeling/TestCodes/BayesianCognitiveModeling"
# List all .R files recursively
r_files <- list.files(path = dir_path, pattern = "\\.R$", recursive = TRUE, full.names = TRUE)
# Create dataframe to write checking result
if (!file.exists(checked_source_path)) {
df <- data.frame(path = c("Test"), isGood = c(TRUE))
for (r_file in r_files) {
new_row <- data.frame(
path = r_file,
isGood = FALSE
)
df <- rbind(df, new_row)
}
write.csv(df, file = checked_source_path, row.names = FALSE)
checking_files <- r_files
} else {
df <- read.csv(checked_source_path)
filtered_df <- df %>% filter(isGood == TRUE)
checking_files <- r_files[!r_files %in% filtered_df$path]
}
checking_files <- "/Users/seojin/Documents/ComputationalCognitiveModeling/BayesianCognitiveModeling/ParameterEstimation/Binomial/Rate_3_Stan.R"
# Function to save plots
save_all_plots <- function(plot_dir, plot_count) {
plot_file <- file.path(plot_dir, paste0("plot_", plot_count, ".png"))
dev.copy(png, filename = plot_file)
dev.off()
}
# Get experiment directory paths
experiment_dir_paths <- unique(dirname(checking_files))
# Loop all experiment directory and run source code.
for (experiment_dir_path in experiment_dir_paths) {
setwd(experiment_dir_path)
r_files <- list.files(path = experiment_dir_path, pattern = "\\.R$", full.names = TRUE)
r_files <- r_files[r_files %in% checking_files]
for (r_file in r_files) {
# Get the R file name from the full path
file_name <- tools::file_path_sans_ext(basename(r_file))
# Define the path to save the plots
plot_dir <- file.path(plot_dir_path, "plots", file_name)
if (!dir.exists(plot_dir)) {
dir.create(plot_dir, recursive = TRUE)  # Ensure all directories in the path are created
}
# Initialize log_conn to avoid reference errors
log_conn <- file(log_file_path, open = "a")
tryCatch({
# Redirect both standard output and error to the log file
sink(log_conn, append = TRUE)
sink(log_conn, append = TRUE, type = "message")
cat(paste("\nSource code is on checking:", r_file))
plot_count <- 1  # Initialize plot count
# Run the R script
source(r_file)
# Save each plot generated during the script execution
if (dev.cur() > 1) {  # If there is an active plot
save_all_plots(plot_dir, plot_count)
plot_count <- plot_count + 1
}
isGood <<- TRUE
}, error = function(e) {
# Error handling, writing directly to the log file
cat("Error in source:", r_file, "\n", conditionMessage(e), "\n", file = log_file_path, append = TRUE)
isGood <<- FALSE
}, finally = {
# Ensure the sinks are reset and the connection is closed
sink()  # Reset the standard output back to the console
sink(type = "message")  # Reset the standard error output back to the console
close(log_conn)  # Close the log file connection
# Write the updated data frame back to the CSV file
df <- read.csv(checked_source_path)
df[df$path == r_file, "isGood"]  <- isGood
write.csv(df, file = checked_source_path, row.names = FALSE)
})
}
}
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (system_info["sysname"] == "Windows") {
windows()
} else {
# Run a different function or do nothing for non-Windows OS
# library(grDevices)
# x11(width = 10, height = 5)
quartz(width = 10, height = 5)
}
isGood
# When you work through the code for the first time,
# execute each command one at a time to better understand
# what it does.
library(rstan)
# to be passed on to Stan
data <- read_rdump("Rate_1.data.R")
myinits <- list(
list(theta=.1),  # chain 1 starting value
list(theta=.9))  # chain 2 starting value
# parameters to be monitored:
parameters <- c("theta")
# The following command calls Stan with specific options.
# For a detailed description type "?stan".
samples <- stan(file="Rate_1.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=2,
thin=1,
# warmup=100,  # Stands for burn-in; Default = iter/2
# seed=123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
# The commands below are useful for a quick overview:
print(samples)  # a rough summary
plot(samples)   # a visual representation
# When you work through the code for the first time,
# execute each command one at a time to better understand
# what it does.
library(rstan)
# to be passed on to Stan
data <- read_rdump("Rate_1.data.R")
myinits <- list(
list(theta=.1),  # chain 1 starting value
list(theta=.9))  # chain 2 starting value
# parameters to be monitored:
parameters <- c("theta")
# The following command calls Stan with specific options.
# For a detailed description type "?stan".
samples <- stan(file="Rate_1.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=2,
thin=1,
# warmup=100,  # Stands for burn-in; Default = iter/2
# seed=123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
# The commands below are useful for a quick overview:
print(samples)  # a rough summary
plot(samples)   # a visual representation
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (system_info["sysname"] == "Windows") {
windows(width=6, height=4)
} else {
# Run a different function or do nothing for non-Windows OS
# library(grDevices)
# x11(width=6, height=4)
quartz(width=6, height=4)
}
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
Nbreaks <- 80
y       <- hist(theta, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=1,
xlim=c(0,1), xlab="Rate", ylab="Posterior Density")
# When you work through the code for the first time,
# execute each command one at a time to better understand
# what it does.
library(rstan)
# to be passed on to Stan
data <- read_rdump("Rate_1.data.R")
myinits <- list(
list(theta=.1),  # chain 1 starting value
list(theta=.9))  # chain 2 starting value
# parameters to be monitored:
parameters <- c("theta")
# The following command calls Stan with specific options.
# For a detailed description type "?stan".
samples <- stan(file="Rate_1.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=2,
thin=1,
# warmup=100,  # Stands for burn-in; Default = iter/2
# seed=123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
# The commands below are useful for a quick overview:
print(samples)  # a rough summary
plot(samples)   # a visual representation
quartz(width=6, height=4)
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
Nbreaks <- 80
y       <- hist(theta, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=1,
xlim=c(0,1), xlab="Rate", ylab="Posterior Density")
quartz(width=4, height=2)
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
Nbreaks <- 80
y       <- hist(theta, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=1,
xlim=c(0,1), xlab="Rate", ylab="Posterior Density")
quartz(width=6, height=4)
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
Nbreaks <- 80
y       <- hist(theta, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=1,
xlim=c(0,1), xlab="Rate", ylab="Posterior Density")
# When you work through the code for the first time,
# execute each command one at a time to better understand
# what it does.
library(rstan)
# to be passed on to Stan
data <- read_rdump("Rate_1.data.R")
myinits <- list(
list(theta=.1),  # chain 1 starting value
list(theta=.9))  # chain 2 starting value
# parameters to be monitored:
parameters <- c("theta")
# The following command calls Stan with specific options.
# For a detailed description type "?stan".
samples <- stan(file="Rate_1.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=2,
thin=1,
# warmup=100,  # Stands for burn-in; Default = iter/2
# seed=123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
# The commands below are useful for a quick overview:
print(samples)  # a rough summary
plot(samples)   # a visual representation
# When you work through the code for the first time,
# execute each command one at a time to better understand
# what it does.
library(rstan)
# to be passed on to Stan
data <- read_rdump("Rate_1.data.R")
myinits <- list(
list(theta=.1),  # chain 1 starting value
list(theta=.9))  # chain 2 starting value
# parameters to be monitored:
parameters <- c("theta")
# The following command calls Stan with specific options.
# For a detailed description type "?stan".
samples <- stan(file="Rate_1.stan",
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=2,
thin=1,
# warmup=100,  # Stands for burn-in; Default = iter/2
# seed=123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
# The commands below are useful for a quick overview:
print(samples)  # a rough summary
plot(samples)   # a visual representation
