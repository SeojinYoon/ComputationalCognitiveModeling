data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=10000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
model
data
myinits
library(rstan)
rstan
packageVersion("rstan")
remotes::install_github("stan-dev/rstan", ref = "v2.21.8")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.8")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.8")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.8")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.8")
remove.packages("rstan")
library(rstan)
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.8")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.0")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.0")
library(rstan)
library(rstan)
packageVersion(rstan)
library(rstan)
remove.packages('rstan')
library(rstan)
packageVersion(rstan)
library(rstan)
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.0")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(rstan)
packageVersion(rstan)
packageVersion(rstan)
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(rstan)
install.packages("rstan", repos = "https://mc-stan.org/r-packages/", version = "2.21.0")
install.packages("rstan", repos = "https://mc-stan.org/r-packages/", version = "2.21.0")
library(rstan)
packageVersion(rstan)
rstan_options(auto_write = TRUE)
library(rstan)
packageVersion(rstan)
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.0")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.0")
library(rstan)
packageVersion(rstan)
model <- "
# ChaSaSoon Censored Data
data {
int<lower=0> nfails;
int<lower=0> n;
int<lower=0> z_observed;
}
parameters {
real<lower=.25,upper=1> theta;  // Uniform Prior on Rate Theta
}
model {
// Observed Data
z_observed ~ binomial(n, theta);
// Unobserved Data
increment_log_prob(nfails * log(binomial_cdf(25, n, theta)
- binomial_cdf(14, n, theta)));
}
"
nfails <- 949
n <- 50  # Number of questions
z_observed <- 30  # Score on the successful trial
data <- list(nfails=nfails, n=n, z_observed=z_observed) # to be passed on to Stan
myinits <- list(
list(theta=.5))
parameters <- c("theta")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=10000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.0")
library(rstan)
packageVersion(rstan)
stan
stan
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.8")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.8")
library(rstan)
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.8")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.8")
library(rstan)
packageVersion(rstan)
packageVersion("rstan")
remove.packages("rstan")
packageVersion("rstan")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.8")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.8")
library(rstan)
packageVersion("rstan")
remove.packages("rstan")
library(rstan)
packageVersion("rstan")
packageVersion("rstan")
install.packages("rstan", version = "2.21.0")
install.packages("rstan", version = "2.21.0")
library(rstan)
library(rstan)
packageVersion("rstan")
library(rstan)
packageVersion("rstan")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(rstan)
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
library("rstan")
stan
packageVersion("rstan")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
library(rstan)
packageVersion("rstan")
model <- "
# ChaSaSoon Censored Data
data {
int<lower=0> nfails;
int<lower=0> n;
int<lower=0> z_observed;
}
parameters {
real<lower=.25,upper=1> theta;  // Uniform Prior on Rate Theta
}
model {
// Observed Data
z_observed ~ binomial(n, theta);
// Unobserved Data
increment_log_prob(nfails * log(binomial_cdf(25, n, theta)
- binomial_cdf(14, n, theta)));
}
"
nfails <- 949
n <- 50  # Number of questions
z_observed <- 30  # Score on the successful trial
data <- list(nfails=nfails, n=n, z_observed=z_observed) # to be passed on to Stan
myinits <- list(
list(theta=.5))
parameters <- c("theta")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=10000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
install.packages("rstan", version = "2.21.8")
install.packages("rstan", version = "2.21.8")
install.packages("rstan", version = "2.21.8")
library(rstan)
packageVersion("rstan")
library(rtools)
available.packages("rstan")
rtools
rtools43
rtools40
system('where make')
library(rstan)
packageVersion("rstan")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.8")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.8")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")), version = "2.21.8")
library(rstan)
packageVersion("rstan")
# clears workspace:
rm(list=ls())
library(rstan)
#### Notes to Stan model #######################################################
## Implementation of this model can be difficult to understand for beginners.
## Therefore I suggest either not trying to understand it and look on WinBUGS
## version or go deep into Stan manual.
################################################################################
model <- "
# ChaSaSoon Censored Data
data {
int<lower=0> nfails;
int<lower=0> n;
int<lower=0> z_observed;
}
parameters {
real<lower=.25,upper=1> theta;  // Uniform Prior on Rate Theta
}
model {
// Observed Data
z_observed ~ binomial(n, theta);
// Unobserved Data
increment_log_prob(nfails * log(binomial_cdf(25, n, theta)
- binomial_cdf(14, n, theta)));
}
"
nfails <- 949
n <- 50  # Number of questions
z_observed <- 30  # Score on the successful trial
data <- list(nfails=nfails, n=n, z_observed=z_observed) # to be passed on to Stan
myinits <- list(
list(theta=.5))
parameters <- c("theta")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=10000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
remove.packages("rstan")
library(rstan)
packageVersion("rstan")
install.packages("https://cran.r-project.org/src/contrib/Archive/rstan/rstan_2.21.8.tar.gz", repos = NULL, type = "source")
# clears workspace:
rm(list=ls())
library(rstan)
install.packages("rstan", version = "2.21.8")
remove.packages("rstan")
install.packages("https://cran.r-project.org/src/contrib/Archive/rstan/rstan_2.21.8.tar.gz", repos = NULL, type = "source")
library(rstan)
packageVersion("rstan")
model <- "
# ChaSaSoon Censored Data
data {
int<lower=0> nfails;
int<lower=0> n;
int<lower=0> z_observed;
}
parameters {
real<lower=.25,upper=1> theta;  // Uniform Prior on Rate Theta
}
model {
// Observed Data
z_observed ~ binomial(n, theta);
// Unobserved Data
increment_log_prob(nfails * log(binomial_cdf(25, n, theta)
- binomial_cdf(14, n, theta)));
}
"
nfails <- 949
n <- 50  # Number of questions
z_observed <- 30  # Score on the successful trial
data <- list(nfails=nfails, n=n, z_observed=z_observed) # to be passed on to Stan
myinits <- list(
list(theta=.5))
parameters <- c("theta")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=10000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
library(rstan)
packageVersion("rstan")
# clears workspace:
rm(list=ls())
library(rstan)
#### Notes to Stan model #######################################################
## Implementation of this model can be difficult to understand for beginners.
## Therefore I suggest either not trying to understand it and look on WinBUGS
## version or go deep into Stan manual.
################################################################################
model <- "
# ChaSaSoon Censored Data
data {
int<lower=0> nfails;
int<lower=0> n;
int<lower=0> z_observed;
}
parameters {
real<lower=.25,upper=1> theta;  // Uniform Prior on Rate Theta
}
model {
// Observed Data
z_observed ~ binomial(n, theta);
// Unobserved Data
increment_log_prob(nfails * log(binomial_cdf(25, n, theta)
- binomial_cdf(14, n, theta)));
}
"
nfails <- 949
n <- 50  # Number of questions
z_observed <- 30  # Score on the successful trial
data <- list(nfails=nfails, n=n, z_observed=z_observed) # to be passed on to Stan
myinits <- list(
list(theta=.5))
parameters <- c("theta")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=10000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
packageVersion(rstan)
library(rstan)
packageVersion(rstan)
library(rstan)
packageVersion("rstan")
install.packages("devtools")
library(devtools)
sion("rstan", version = "2.21.0")
remotes::install_version("rstan", version = "2.21.0")
remotes::install_version("rstan", version = "2.21.8")
remove.packages("rstan")
remotes::install_version("rstan", version = "2.21.8")
library(devtools)
remotes::install_version("rstan", version = "2.21.8")
library(rstan)
packageVersion("rstan")
# clears workspace:
rm(list=ls())
library(rstan)
packageVersion("rstan")
#### Notes to Stan model #######################################################
## Implementation of this model can be difficult to understand for beginners.
## Therefore I suggest either not trying to understand it and look on WinBUGS
## version or go deep into Stan manual.
################################################################################
model <- "
# ChaSaSoon Censored Data
data {
int<lower=0> nfails;
int<lower=0> n;
int<lower=0> z_observed;
}
parameters {
real<lower=.25,upper=1> theta;  // Uniform Prior on Rate Theta
}
model {
// Observed Data
z_observed ~ binomial(n, theta);
// Unobserved Data
increment_log_prob(nfails * log(binomial_cdf(25, n, theta)
- binomial_cdf(14, n, theta)));
}
"
nfails <- 949
n <- 50  # Number of questions
z_observed <- 30  # Score on the successful trial
data <- list(nfails=nfails, n=n, z_observed=z_observed) # to be passed on to Stan
myinits <- list(
list(theta=.5))
parameters <- c("theta")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=10000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=10000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
remove.packages("rstan")
# clears workspace:
rm(list=ls())
library(rstan)
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
# clears workspace:
rm(list=ls())
library(rstan)
#### Notes to Stan model #######################################################
## 1) This is the first time we use simplex data type. Simplex is similar to
##    vector, but with a property that sum of all it's elements is equal to 1.
## 2) Sampling statements for parameters alpha, beta and gamma could be removed
##    leading to uniform prior on (0, 1) interval which is the same as beta(1, 1)
## 3) Variable n was removed here. Stan doesn't need this information as
##    an argument for multinomial distribution. Always make sure that you know
##    what arguments are required for a function / sampling statement. In many
##    cases these are different from BUGS. Very useful for this are last pages
##    of Stan manual
################################################################################
model <- "
// Kappa Coefficient of Agreement
data {
int<lower=0> y[4];
}
parameters {
// Underlying Rates
// Rate Objective Method Decides 'one'
real<lower=0,upper=1> alpha;
// Rate Surrogate Method Decides 'one' When Objective Method Decides 'one'
real<lower=0,upper=1> beta;
// Rate Surrogate Method Decides 'zero' When Objective Method Decides 'zero'
real<lower=0,upper=1> gamma;
}
transformed parameters {
simplex[4] pi;
real xi;
real psi;
real kappa;
// Probabilities For Each Count
pi[1] <- alpha * beta;
pi[2] <- alpha * (1 - beta);
pi[3] <- (1 - alpha) * (1 - gamma);
pi[4] <- (1 - alpha) * gamma;
// Derived Measures
// Rate Surrogate Method Agrees With the Objective Method
xi <- alpha * beta + (1 - alpha) * gamma ;
// Rate of Chance Agreement
psi <- (pi[1] + pi[2]) * (pi[1] + pi[3]) + (pi[2] + pi[4]) * (pi[3] + pi[4]);
// Chance-Corrected Agreement
kappa <- (xi - psi) / (1 - psi);
}
model {
alpha ~ beta(1, 1);  // could be removed
beta ~ beta(1, 1);  // could be removed
gamma ~ beta(1, 1);  // could be removed
// Count Data
y ~ multinomial(pi);
}"
# CHOOSE a data set:
# Influenza
y <- c(14, 4, 5, 210)
# Hearing Loss
# y <- c(20, 7, 103, 417)
# Rare Disease
# y <- c(0, 0, 13, 157)
data <- list(y=y) # to be passed on to WinBUGS
myinits <- list(
list(alpha=.5, beta=.5, gamma=.5))
# parameters to be monitored:
parameters <- c("kappa", "xi", "psi", "alpha", "beta", "gamma", "pi")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=4000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
plot(samples)
# samples$mean$kappa
# Compare to Cohen's point estimate
n <- sum(y)
p0 <- (y[1]+y[4])/n
pe <- (((y[1]+y[2]) * (y[1]+y[3])) + ((y[2]+y[4]) * (y[3]+y[4]))) / n^2
kappa.Cohen <- (p0-pe) / (1-pe)
kappa.Cohen
remove.packages("rstan")
install.packages("remotes")
remotes::install_version("rstan", version = "2.21.1", repos = "https://cloud.r-project.org/")
remotes::install_version("rstan", version = "2.21.1", repos = "https://cloud.r-project.org/")
remotes::install_version("rstan", version = "2.21.3", repos = "https://cloud.r-project.org/")
remotes::install_version("rstan", version = "2.21.8", repos = "https://cloud.r-project.org/")
remove.packages("rstan")
remotes::install_version("rstan", version = "2.21.8", repos = "https://cloud.r-project.org/")
remotes::install_version("rstan", version = "2.19.3", repos = "https://cloud.r-project.org/")
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(rstan)
packageVersion("rstan")
