1.0,  98,
.5, 100,
.9, 105,
.7, 103,
.4, 110,
1.2,  99,
1.4,  87,
.6, 113,
1.1,  89,
1.3,  93), nrow=22,ncol=2,byrow=T)
}
n <- nrow(x) # number of people/units measured
data <- list(x=x, n=n) # to be passed on to Stan
myinits <- list(
list(r=0, mu=c(0, 0), lambda=c(1, 1)))
# parameters to be monitored:
parameters <- c("r", "mu", "sigma")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=10000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
r <- extract(samples)$r
#Frequentist point-estimate of r:
freq.r <- cor(x[,1],x[,2])
#make the two panel plot:
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (system_info["sysname"] == "Windows") {
windows(width=9,height=6) #this command works only under Windows!
} else {
# Run a different function or do nothing for non-Windows OS
}
layout(matrix(c(1,2),1,2))
layout.show(2)
#some plotting options to make things look better:
par(cex.main=1.5, mar=c(5, 6, 4, 5) + 0.1, mgp=c(3.5, 1, 0), cex.lab=1.5,
font.lab=2, cex.axis=1.3, bty = "n", las=1)
# data panel:
plot(x[,1],x[,2], type="p", pch=19, cex=1)
# correlation panel:
plot(density(r, from=-1,to=1), main="", ylab="Posterior Density",
xlab="Correlation", lwd=2)
lines(c(freq.r, freq.r), c(0,100), lwd=2, lty=2)
# clears workspace:
rm(list=ls())
library(rstan)
#### Notes to Stan model #######################################################
## 1) All notes from previous model Correlation_1 also apply to this model.
## 2) If you change sigmaerror to c(0.03, 10) as suggested in excercise 5.2.2
##    warning statements will be more frequent and posterior less smooth.
################################################################################
model <- "
// Pearson Correlation With Uncertainty in Measurement
data {
int<lower=0> n;
vector[2] x[n];
vector[2] sigmaerror;
}
parameters {
vector[2] mu;
vector<lower=0>[2] lambda;
real<lower=-1,upper=1> r;
vector[2] y[n];
}
transformed parameters {
vector<lower=0>[2] sigma;
cov_matrix[2] T;
// Reparameterization
sigma[1] <- inv_sqrt(lambda[1]);
sigma[2] <- inv_sqrt(lambda[2]);
T[1,1] <- square(sigma[1]);
T[1,2] <- r * sigma[1] * sigma[2];
T[2,1] <- r * sigma[1] * sigma[2];
T[2,2] <- square(sigma[2]);
}
model {
// Priors
mu ~ normal(0, inv_sqrt(.001));
lambda ~ gamma(.001, .001);
// Data
y ~ multi_normal(mu, T);
for (i in 1:n)
x[i] ~ normal(y[i], sigmaerror);
}"
x <- matrix(c( .8, 102,
1.0,  98,
.5, 100,
.9, 105,
.7, 103,
.4, 110,
1.2,  99,
1.4,  87,
.6, 113,
1.1,  89,
1.3,  93), nrow=11, ncol=2, byrow=T)
n <- nrow(x) # number of people/units measured
# precision of measurement:
sigmaerror = c(.03, 1)
# sigmaerror = c(.03, 10)
data <- list(x=x, n=n, sigmaerror=sigmaerror) # to be passed on to Stan
myinits <- list(
list(r=0, mu=c(0, 0), lambda=c(1, 1), y=matrix(c(rep(1, n), rep(100, n)), n, 2)))
# parameters to be monitored:
parameters <- c("r", "mu", "sigma")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
r    = extract(samples)$r
#Frequentist point-estimate of r:
freq.r <- cor(x[,1],x[,2])
#make the two panel plot:
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (system_info["sysname"] == "Windows") {
windows(width=9,height=6) #this command works only under Windows!
} else {
# Run a different function or do nothing for non-Windows OS
}
layout(matrix(c(1,2),1,2))
layout.show(2)
#some plotting options to make things look better:
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
# data panel:
plot(x[,1],x[,2], type="p", pch=19, cex=1)
for (i in 1:n) {
lines(c(x[i,1]-sigmaerror[1],x[i,1]+sigmaerror[1]), c(x[i,2],x[i,2]))
lines(c(x[i,1],x[i,1]), c(x[i,2]-sigmaerror[2],x[i,2]+sigmaerror[2]))
}
# correlation panel:
plot(density(r, from=-1,to=1), main="", ylab="Posterior Density",
xlab="Correlation", lwd=2)
lines(c(freq.r, freq.r), c(0,100), lwd=2, lty=2)
# clears workspace:
rm(list=ls())
library(rstan)
#### Notes to Stan model #######################################################
## Stan has hypergeometric distribution implemented, so in one way the code
## is more intuitive. On the other hand, Stan can't sample discrete parameters,
## therefore we have to increment log probability manually (as we did in
## Survey example).
################################################################################
model <- "
// Planes
data {
int<lower=1> x;
int<lower=1> n;
int<lower=0,upper=n> k;
int<lower=x> tmax;
}
transformed data {
int<lower=x> tmin;
tmin <- x + n - k;
}
transformed parameters {
vector[tmax] lp_parts;
for (t in 1:tmax)
if (t < tmin)
lp_parts[t] <- log(1.0 / tmax) + negative_infinity();  // Zero probability
else
lp_parts[t] <- log(1.0 / tmax) + hypergeometric_log(k, n, x, t - x);
}
model {
increment_log_prob(log_sum_exp(lp_parts));
}
generated quantities {
int<lower=tmin,upper=tmax> t;
simplex[tmax] tp;
tp <- softmax(lp_parts);
t <- categorical_rng(tp);
}"
x <- 10  # number of captures
k <- 4  # number of recaptures from n
n <- 5  # size of second sample
tmax <- 50  # maximum population size
data <- list(x=x, k=k, n=n, tmax=tmax) # to be passed on to Stan
parameters <- c("t")  # Parameters to be monitored
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init="random",
algorithm="Fixed_param",  # Since no parameters are sampled
pars=parameters,
iter=10000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
# Collect all samples in "t":
t <- extract(samples)$t
# Plot the posterior for theta:
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (system_info["sysname"] == "Windows") {
windows(width=9,height=6) #this command works only under Windows!
} else {
# Run a different function or do nothing for non-Windows OS
}
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
hist(t, xlim=c(x+n-k,tmax), lty=1, lwd=2, col="grey", prob=T,
breaks=(((x+n-k-1):tmax)+.5), axes=T, main=" ",
xlab="Number of Planes", ylab="Posterior Mass")
# clears workspace:
rm(list=ls())
library(rstan)
model <- "
// Cheating Latent Mixture Model
data {
int<lower=1> n;
int<lower=1> p;
int<lower=1,upper=n> k[p];
int<lower=0,upper=1> truth[p];
}
parameters {
real<lower=0,upper=1> phi;
real<lower=0,upper=1> mubon;
real<lower=0> mudiff;
real<lower=5,upper=50> lambdabon;
real<lower=5,upper=50> lambdache;
vector<lower=0,upper=1>[p] theta;
}
transformed parameters {
vector[2] lp_parts[p];
vector<lower=0>[2] alpha;
vector<lower=0>[2] beta;
real<lower=0,upper=1> muche;
// Additivity on Logit Scale
muche <- inv_logit(logit(mubon) + mudiff);
// Transformation to Group Mean and Precision
alpha[1] <- mubon * lambdabon;
beta[1] <- lambdabon * (1 - mubon);
alpha[2] <- muche * lambdache;
beta[2]  <- lambdache * (1 - muche);
// Data are Binomial with Rate Given by
// Each Personâ€™s Group Assignment
for (i in 1:p) {
lp_parts[i,1] <- log1m(phi) + beta_log(theta[i], alpha[1], beta[1]);
lp_parts[i,2] <- log(phi) + beta_log(theta[i], alpha[2], beta[2]);
}
}
model {
// Priors
mubon ~ beta(1, 1);  // can be removed
mudiff ~ normal(0, 1 / sqrt(.5))T[0,];  // Constrained to be Positive
// Relatively Uninformative Prior on Base Rate
phi ~ beta(5, 5);
for (i in 1:p)
increment_log_prob(log_sum_exp(lp_parts[i]));
k ~ binomial(n, theta);
}
generated quantities {
int<lower=0,upper=1> z[p];
real pc;
vector[p] pct;
for (i in 1:p) {
vector[2] prob;
prob <- softmax(lp_parts[i]);
// Each Person Belongs to One of Two Latent Groups
z[i] <- bernoulli_rng(prob[2]);
// Correct Count
pct[i] <- if_else(z[i] == truth[i], 1, 0);
}
pc <- sum(pct);
}"
cheat.dat  <- read.table("cheat.csv", header=F, sep=",")
# clears workspace:
rm(list=ls())
library(rstan)
#### Notes to Stan model #######################################################
## 1) Multivariate normal distribution in Stan uses covariance matrix instead of
##    precision matrix.
## 2) Multivariate normal distribution can be (and is) also vectorized.
## 3) Warnings may occur during sampling, ignore them.
################################################################################
model <- "
// Pearson Correlation
data {
int<lower=0> n;
vector[2] x[n];
}
parameters {
vector[2] mu;
vector<lower=0>[2] lambda;
real<lower=-1,upper=1> r;
}
transformed parameters {
vector<lower=0>[2] sigma;
cov_matrix[2] T;
// Reparameterization
sigma[1] <- inv_sqrt(lambda[1]);
sigma[2] <- inv_sqrt(lambda[2]);
T[1,1] <- square(sigma[1]);
T[1,2] <- r * sigma[1] * sigma[2];
T[2,1] <- r * sigma[1] * sigma[2];
T[2,2] <- square(sigma[2]);
}
model {
// Priors
mu ~ normal(0, inv_sqrt(.001));
lambda ~ gamma(.001, .001);
// Data
x ~ multi_normal(mu, T);
}"
# Choose a dataset:
dataset <- 1
# The datasets:
if (dataset == 1) {
x <- matrix(c( .8, 102,
1.0,  98,
.5, 100,
.9, 105,
.7, 103,
.4, 110,
1.2,  99,
1.4,  87,
.6, 113,
1.1,  89,
1.3,  93), nrow=11, ncol=2, byrow=T)
}
if (dataset == 2) {
x <- matrix(c( .8, 102,
1.0,  98,
.5, 100,
.9, 105,
.7, 103,
.4, 110,
1.2,  99,
1.4,  87,
.6, 113,
1.1,  89,
1.3,  93,
.8, 102,
1.0,  98,
.5, 100,
.9, 105,
.7, 103,
.4, 110,
1.2,  99,
1.4,  87,
.6, 113,
1.1,  89,
1.3,  93), nrow=22,ncol=2,byrow=T)
}
n <- nrow(x) # number of people/units measured
data <- list(x=x, n=n) # to be passed on to Stan
myinits <- list(
list(r=0, mu=c(0, 0), lambda=c(1, 1)))
# parameters to be monitored:
parameters <- c("r", "mu", "sigma")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=10000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
r <- extract(samples)$r
#Frequentist point-estimate of r:
freq.r <- cor(x[,1],x[,2])
#make the two panel plot:
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (system_info["sysname"] == "Windows") {
windows(width=9,height=6) #this command works only under Windows!
} else {
# Run a different function or do nothing for non-Windows OS
library(grDevices)
x11(width = 10, height = 5)
}
layout(matrix(c(1,2),1,2))
layout.show(2)
#some plotting options to make things look better:
par(cex.main=1.5, mar=c(5, 6, 4, 5) + 0.1, mgp=c(3.5, 1, 0), cex.lab=1.5,
font.lab=2, cex.axis=1.3, bty = "n", las=1)
# data panel:
plot(x[,1],x[,2], type="p", pch=19, cex=1)
# correlation panel:
plot(density(r, from=-1,to=1), main="", ylab="Posterior Density",
xlab="Correlation", lwd=2)
lines(c(freq.r, freq.r), c(0,100), lwd=2, lty=2)
# clears workspace:
rm(list=ls())
library(rstan)
#### Notes to Stan model #######################################################
## 1) All notes from previous model Correlation_1 also apply to this model.
## 2) If you change sigmaerror to c(0.03, 10) as suggested in excercise 5.2.2
##    warning statements will be more frequent and posterior less smooth.
################################################################################
model <- "
// Pearson Correlation With Uncertainty in Measurement
data {
int<lower=0> n;
vector[2] x[n];
vector[2] sigmaerror;
}
parameters {
vector[2] mu;
vector<lower=0>[2] lambda;
real<lower=-1,upper=1> r;
vector[2] y[n];
}
transformed parameters {
vector<lower=0>[2] sigma;
cov_matrix[2] T;
// Reparameterization
sigma[1] <- inv_sqrt(lambda[1]);
sigma[2] <- inv_sqrt(lambda[2]);
T[1,1] <- square(sigma[1]);
T[1,2] <- r * sigma[1] * sigma[2];
T[2,1] <- r * sigma[1] * sigma[2];
T[2,2] <- square(sigma[2]);
}
model {
// Priors
mu ~ normal(0, inv_sqrt(.001));
lambda ~ gamma(.001, .001);
// Data
y ~ multi_normal(mu, T);
for (i in 1:n)
x[i] ~ normal(y[i], sigmaerror);
}"
x <- matrix(c( .8, 102,
1.0,  98,
.5, 100,
.9, 105,
.7, 103,
.4, 110,
1.2,  99,
1.4,  87,
.6, 113,
1.1,  89,
1.3,  93), nrow=11, ncol=2, byrow=T)
n <- nrow(x) # number of people/units measured
# precision of measurement:
sigmaerror = c(.03, 1)
# sigmaerror = c(.03, 10)
data <- list(x=x, n=n, sigmaerror=sigmaerror) # to be passed on to Stan
myinits <- list(
list(r=0, mu=c(0, 0), lambda=c(1, 1), y=matrix(c(rep(1, n), rep(100, n)), n, 2)))
# parameters to be monitored:
parameters <- c("r", "mu", "sigma")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=1,
thin=1,
# warmup = 100,  # Stands for burn-in; Default = iter/2
# seed = 123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
r    = extract(samples)$r
#Frequentist point-estimate of r:
freq.r <- cor(x[,1],x[,2])
#make the two panel plot:
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (system_info["sysname"] == "Windows") {
windows(width=9,height=6) #this command works only under Windows!
} else {
# Run a different function or do nothing for non-Windows OS
library(grDevices)
x11(width = 10, height = 5)
}
layout(matrix(c(1,2),1,2))
layout.show(2)
#some plotting options to make things look better:
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
# data panel:
plot(x[,1],x[,2], type="p", pch=19, cex=1)
for (i in 1:n) {
lines(c(x[i,1]-sigmaerror[1],x[i,1]+sigmaerror[1]), c(x[i,2],x[i,2]))
lines(c(x[i,1],x[i,1]), c(x[i,2]-sigmaerror[2],x[i,2]+sigmaerror[2]))
}
# correlation panel:
plot(density(r, from=-1,to=1), main="", ylab="Posterior Density",
xlab="Correlation", lwd=2)
lines(c(freq.r, freq.r), c(0,100), lwd=2, lty=2)
