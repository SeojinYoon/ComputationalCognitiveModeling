text(1, .75, labels = "Prior", cex=1.5, pos=4)
# clears workspace:
rm(list=ls())
library(rstan)
model <- "
// Pledgers
data {
int<lower=0> n1;
int<lower=0> n2;
int<lower=0,upper=n1> s1;
int<lower=0,upper=n2> s2;
}
parameters {
real<lower=0,upper=1> theta1;
real<lower=0,upper=1> theta2;
real<lower=0,upper=1> theta1prior;
real<lower=0,upper=1> theta2prior;
}
transformed parameters {
real<lower=-1,upper=1> delta;
real<lower=-1,upper=1> deltaprior;
// Computation of delta and deltaprior
delta <- theta1 - theta2;
deltaprior <- theta1prior - theta2prior;
}
model {
// Prior sampling
theta1 ~ beta(1, 1);
theta2 ~ beta(1, 1);
theta1prior ~ beta(1, 1);
theta2prior ~ beta(1, 1);
// Data
s1 ~ binomial(n1, theta1);
s2 ~ binomial(n2, theta2);
}"
# pledger data:
s1 <- 424
s2 <- 5416
n1 <- 777
n2 <- 9072
# two-sided p-value = 0.005848:
prop.test(c(s1, s2), c(n1, n2), alternative=c("two.sided"))  # approximate
# Analytical Bayes factor:
log.BF01 <- lchoose(n1, s1) + lchoose(n2, s2) + log(n1 + 1) + log(n2 + 1) -
lchoose((n1 + n2), (s1 + s2)) - log(n1 + n2 + 1)
BF01 <- exp(log.BF01)
data <- list(s1=s1, s2=s2, n1=n1, n2=n2) # to be passed on to Stan
myinits <- list(
list(theta1=runif(1), theta2=runif(1),
theta1prior=runif(1), theta2prior=runif(1)),
list(theta1=runif(1), theta2=runif(1),
theta1prior=runif(1), theta2prior=runif(1)),
list(theta1=runif(1), theta2=runif(1),
theta1prior=runif(1), theta2prior=runif(1)))
parameters <- c("theta1", "theta2", "delta", "deltaprior")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=30000,
chains=3,
thin=1,
# warmup=100,  # Stands for burn-in; Default = iter/2
# seed=123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
######################################################
# H1: delta is unrestricted
######################################################
# Collect posterior samples across all chains:
delta.posterior  <- extract(samples)$delta
delta.prior      <- extract(samples)$deltaprior
#============ BFs based on logspline fit ===========================
library(polspline) # this package can be installed from within R
fit.prior     <- logspline(delta.prior, lbound=-1, ubound=1) # note the bounds.
fit.posterior <- logspline(delta.posterior, lbound=-1, ubound=1)
# 95% confidence interval:
x0 <- qlogspline(0.025,fit.posterior)
x1 <- qlogspline(0.975,fit.posterior)
posterior <- dlogspline(0, fit.posterior) # this gives the pdf at point delta = 0
prior     <- dlogspline(0, fit.prior)     # based on the logspline fit
BF01      <- posterior/prior
# 1/BF01 gives 2.14 -- Exact solution: 2.223484
BF01      <- posterior
# because we know the height of the prior equals 1 at delta = 0
# 1/BF01 gives 2.17
#============ Plot Prior and Posterior ================================
# Two plots, once globally and once zoomed-in
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
#======= Plot Prior and Posterior ======================
Nbreaks <- 20
y <- hist(delta.prior, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=1,
xlim=c(-1,1), ylim=c(0,25), xlab=" ", ylab="Density", axes=F)
axis(1, at = c(-1, -0.5, 0, 0.50, 1), lab=c("-1", "-0.5", "0", "0.5", "1"))
axis(2)
mtext(expression(delta), side=1, line = 2.8, cex=2)
par(new=T)
x <- hist(delta.posterior, Nbreaks, plot=F)
plot(c(x$breaks, max(x$breaks)), c(0,x$density,0), type="S", lwd=2, lty=2,
xlim=c(-1,1), ylim=c(0,25), xlab=" ", ylab="Density", main ="Full Scale",
axes=F)
axis(1, at = c(-1, -0.5, 0, 0.50, 1), lab=c("-1", "-0.5", "0", "0.5", "1"))
axis(2)
#now bring in log spline density estimation:
par(new=T)
# plot the triangular prior:
lines(c(-1,0),c(0,1), lty=1, lwd=1)
lines(c(0,1),c(1,0), lty=1, lwd=1)
par(new=T)
plot(fit.posterior, ylim=c(0,25), xlim=c(-1,1), lty=1, lwd=1, axes=F)
text(-1, 20, labels = "Posterior", cex = 1.5, pos=4)
text(-1, 2, labels = "Prior", cex=1.5, pos=4)
######## Second plot, zoom in:
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
xmin <- -0.05
xmax <- 0.05
ymax <- 5
plot(0,0, ylim=c(0,ymax), xlim=c(xmin,xmax), lwd=2, lty=3, ylab="Density",
xlab=" ", main="Zoomed in", axes=F, col="white")
#white makes this invisible
axis(1, at = c(xmin, 0, xmax), lab=c(paste(xmin), "0", paste(xmax)))
axis(2)
mtext(expression(delta), side=1, line = 2.8, cex=2)
par(new=T)
plot(fit.posterior, ylim=c(0,ymax), xlim=c(xmin,xmax), lty=2, lwd=2, axes=F)
lines(c(-1,0),c(0,1), lty=1, lwd=2)
lines(c(0,1),c(1,0), lty=1, lwd=2)
points(0, 1, pch=19, cex=2)
points(0, dlogspline(0, fit.posterior),pch=19, cex=2)
text(-0.015, 4, labels = "Posterior", cex = 1.5, pos=4)
text(0.01, 1.3, labels = "Prior", cex=1.5, pos=4)
# clears workspace:
rm(list=ls())
library(rstan)
########################### CHOOSE MODEL #######################################
modelChoice <- 1
#> 1) Simple model with a restriction in parameter declaration (it did the trick)
#> 2) Model replicating approach from the book
################################################################################
if (modelChoice == 1) {
model <- "
// Pledgers, Order Restricted Rates
data {
int<lower=0> n1;
int<lower=0> n2;
int<lower=0,upper=n1> s1;
int<lower=0,upper=n2> s2;
}
parameters {
real<lower=0,upper=1> theta2;
real<lower=0,upper=theta2> theta1;
real<lower=0,upper=1> theta2prior;
real<lower=0,upper=theta2prior> theta1prior;
}
transformed parameters {
real<lower=-1,upper=1> delta;
real<lower=-1,upper=1> deltaprior;
// Computation of delta and deltaprior
delta <- theta1 - theta2;
deltaprior <- theta1prior - theta2prior;
}
model {
// Prior Sampling
theta1 ~ beta(1, 1);
theta2 ~ beta(1, 1);
theta1prior ~ beta(1, 1);
theta2prior ~ beta(1, 1);
// Data
s1 ~ binomial(n1, theta1);
s2 ~ binomial(n2, theta2);
}"
} else if (modelChoice == 2) {
model <- "
// Pledgers, Order Restricted Rates
data {
int<lower=0> n1;
int<lower=0> n2;
int<lower=0,upper=n1> s1;
int<lower=0,upper=n2> s2;
}
transformed data {
cov_matrix[2] TI;
vector[2] mu;
real<lower=0> angle;
// Constants
angle <- 45 * pi() / 180;
TI[1,1] <- 1.0;
TI[1,2] <- 0.0;
TI[2,1] <- 0.0;
TI[2,2] <- 1.0;
mu[1] <- 0.0;
mu[2] <- 0.0;
}
parameters {
vector[2] thetap;
vector[2] thetapprior;
}
transformed parameters {
real<lower=-1,upper=1> delta;
real<lower=0,upper=1> theta1;
real<lower=0,upper=1> theta2;
real<lower=-1,upper=1> deltaprior;
real<lower=0,upper=1> theta1prior;
real<lower=0,upper=1> theta2prior;
theta1 <- Phi((cos(angle) * thetap[1]) - (sin(angle) * fabs(thetap[2])));
theta2 <- Phi((sin(angle) * thetap[1]) + (cos(angle) * fabs(thetap[2])));
theta1prior <- Phi(cos(angle) * thetapprior[1]
- sin(angle) * fabs(thetapprior[2]));
theta2prior <- Phi(sin(angle) * thetapprior[1]
+ cos(angle) * fabs(thetapprior[2]));
// Difference
delta <- theta1 - theta2;
deltaprior <- theta1prior - theta2prior;
}
model {
// Order Constrained Rates
thetap ~ multi_normal(mu, TI);
// Prior Sampling
thetapprior ~ multi_normal(mu, TI);
// Data
s1 ~ binomial(n1, theta1);
s2 ~ binomial(n2, theta2);
}"
}
# Pledger data:
s1 = 424
s2 = 5416
n1 = 777
n2 = 9072
data = list(s1=s1, s2=s2, n1=n1, n2=n2) # to be passed on to Stan
if (modelChoice == 1) {
myinits <- list(
list(theta1=.8, theta2=.9, theta1prior=.8, theta2prior=.9),
list(theta1=.5, theta2=.7, theta1prior=.5, theta2prior=.7),
list(theta1=.1, theta2=.3, theta1prior=.1, theta2prior=.3))
} else if (modelChoice == 2) {
myinits <- list(
list(thetap=c(-.8, -.4), thetapprior=c(-.8, -.4)),
list(thetap=c(-.5, -.25), thetapprior=c(-.5, -.25)),
list(thetap=c(-.2, -.1), thetapprior=c(-.2, -.1)))
}
parameters <- c("delta", "deltaprior")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=60000,
chains=3,
thin=1,
warmup=10000,  # Stands for burn-in; Default = iter/2
# seed=123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
######################################################
# Order-restriction. H2: delta < 0
######################################################
# Collect posterior samples across all chains:
delta.posterior  <- extract(samples)$delta
delta.prior      <- extract(samples)$deltaprior
#============ BFs based on logspline fit ===========================
library(polspline) # this package can be installed from within R
fit.posterior <- logspline(delta.posterior, lbound=-1, ubound=0)
posterior     <- dlogspline(0, fit.posterior) # this gives the pdf at point delta = 0
BF02          <- posterior/2 # 0.26, BF20 = 3.78
#======= Plot Order-Restricted Prior and Posterior ======================
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
Nbreaks <- 20
y <- hist(delta.prior, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=1,
xlim=c(-1,0), ylim=c(0,25), xlab=" ", ylab="Density", axes=F)
lines(c(0,0), c(0,2), col="white", lwd=2)
axis(1, at = c(-1, -0.5, 0), lab=c("-1", "-0.5", "0"))
axis(2)
mtext(expression(delta), side=1, line = 2.8, cex=2)
par(new=T)
x <- hist(delta.posterior, Nbreaks, plot=F)
plot(c(x$breaks, max(x$breaks)), c(0,x$density,0), type="S", lwd=2, lty=2,
xlim=c(-1,0), ylim=c(0,25), xlab=" ", ylab="Density", main ="Full Scale",
axes=F)
axis(1, at = c(-1, -0.5, 0), lab=c("-1", "-0.5", "0"))
axis(2)
#now bring in log spline density estimation:
par(new=T)
# plot the prior:
lines(c(-1,0),c(0,2), lty=1, lwd=1)
par(new=T)
plot(fit.posterior, ylim=c(0,25), xlim=c(-1,0), lty=1, lwd=1, axes=F)
text(-0.42, 20, labels = "Posterior", cex = 1.5, pos=4)
text(-0.5, 2.5, labels = "Prior", cex=1.5, pos=4)
######## Second plot, zoom in:
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
xmin <- -0.05
xmax <- 0
ymax <- 5
plot(0,0, ylim=c(0,ymax), xlim=c(xmin,xmax), lwd=2, lty=3, ylab="Density",
xlab=" ", main="Zoomed in", axes=F, col="white")
#white makes this invisible
axis(1, at = c(xmin, -0.025, xmax), lab=c(paste(xmin), -0.025, paste(xmax)))
axis(2)
mtext(expression(delta), side=1, line = 2.8, cex=2)
par(new=T)
plot(fit.posterior, ylim=c(0,ymax), xlim=c(xmin,xmax), lty=2, lwd=2, axes=F)
lines(c(-1,0),c(0,2), lty=1, lwd=2)
points(0, 2, pch=19, cex=2)
points(0, dlogspline(0, fit.posterior),pch=19, cex=2)
text(-0.04, 1.7, labels = "Prior", cex=1.5, pos=4)
text(-0.037, 4, labels = "Posterior", cex = 1.5, pos=4)
# clears workspace:
rm(list=ls())
library(rstan)
########################### CHOOSE MODEL #######################################
modelChoice <- 1
#> 1) Simple model, direct translation from BUGS - poor performance
#> 2) Model with group distribution reparametrization using "Matt trick". This
#     model performs much better.
################################################################################
if (modelChoice == 1) {
model <- "
// Zeelenberg
data {
int<lower=0> ns;
int<lower=0> nb;
int<lower=0> nn;
int<lower=0> sb[ns];
int<lower=0> sn[ns];
}
parameters {
real<lower=0> delta;
real<lower=0> deltaprior;
real<lower=0> mu;
real<lower=0,upper=10> sigma;
real<lower=0,upper=10> sigmaalpha;
vector[ns] alpha;
vector[ns] phin;
}
transformed parameters {
real<lower=0> mualpha;
vector<lower=0,upper=1>[ns] thetab;
vector<lower=0,upper=1>[ns] thetan;
vector[ns] phib;
mualpha <- delta * sigmaalpha;
phib <- phin + alpha;
// Probit transformation
for (i in 1:ns) {
thetab[i] <- Phi(phib[i]);
thetan[i] <- Phi(phin[i]);
}
}
model{
// Priors
mu ~ normal(0, 1)T[0,];
// Priming Effect
delta ~ normal(0, 1)T[0,];
// Sampling from Prior Distribution for Delta
deltaprior ~ normal(0, 1)T[0,];
// Individual Parameters
alpha ~ normal(mualpha, sigmaalpha);
phin ~ normal(mu, sigma);
// Data
sb ~ binomial(nb, thetab);
sn ~ binomial(nn, thetan);
}"
} else if (modelChoice == 2) {
model <- "
// Zeelenberg
data {
int<lower=0> ns;
int<lower=0> nb;
int<lower=0> nn;
int<lower=0> sb[ns];
int<lower=0> sn[ns];
}
parameters {
real<lower=0> delta;
real<lower=0> deltaprior;
real<lower=0> mu;
real<lower=0,upper=10> sigma;
real<lower=0,upper=10> sigmaalpha;
vector[ns] raw_p;  // Matt trick
vector[ns] raw_a;  // Matt trick
}
transformed parameters {
real<lower=0> mualpha;
vector<lower=0,upper=1>[ns] thetab;
vector<lower=0,upper=1>[ns] thetan;
vector[ns] phib;
vector[ns] alpha;
vector[ns] phin;
mualpha <- delta * sigmaalpha;
// Individual Parameters
alpha <- mualpha + sigmaalpha * raw_a;  // Matt trick
phin <- mu + sigma * raw_p;  // Matt trick
phib <- phin + alpha;
// Probit transformation
for (i in 1:ns) {
thetab[i] <- Phi(phib[i]);
thetan[i] <- Phi(phin[i]);
}
}
model{
// Priors
mu ~ normal(0, 1)T[0,];
// Priming Effect
delta ~ normal(0, 1)T[0,];
// Sampling from Prior Distribution for Delta
deltaprior ~ normal(0, 1)T[0,];
raw_a ~ normal(0, 1);  // Matt trick
raw_p ~ normal(0, 1);  // Matt trick
// Data
sb ~ binomial(nb, thetab);
sn ~ binomial(nn, thetan);
}"
}
### Zeelenberg data:
# Study Both:
sb <- c(15,11,15,14,15,18,16,16,18,16,15,13,18,12,11,13,17,18,16,11,17,18,
12,18,18,14,21,18,17,10,11,12,16,18,17,15,19,12,21,15,16,20,15,19,
16,16,14,18,16,19,17,11,19,18,16,16,11,19,18,12,15,18,20, 8,12,19,
16,16,16,12,18,17,11,20)
nb <- 21
# Study Neither:
sn <- c(15,12,14,15,13,14,10,17,13,16,16,10,15,15,10,14,17,18,19,12,19,18,
10,18,16,13,15,20,13,15,13,14,19,19,19,18,13,12,19,16,14,17,15,16,
15,16,13,15,14,19,12,11,17,13,18,13,13,19,18,13,13,16,18,14,14,17,
12,12,16,14,16,18,13,13)
nn <- 21
ns <- length(sb)
# two-sided p-value = .03
t.test(sb, sn, alternative = c("two.sided"), paired=T)
data = list(sb=sb, sn=sn, nb=nb, nn=nn, ns=ns) # to be passed on to Stan
if (modelChoice == 1) {
mychains <- 3
myiterations <- 12000
mywarmup <- 2000
myinits <- list(
list(mu=.3, sigma=.5, delta=1, sigmaalpha=1, alpha=rnorm(ns),
phin=rnorm(ns), deltaprior=abs(rnorm(1))),
list(mu=.5, sigma=1, delta=.01, sigmaalpha=.5, alpha=rnorm(ns),
phin=rnorm(ns), deltaprior=abs(rnorm(1))),
list(mu=.8, sigma=1.5, delta=.5, sigmaalpha=1.5, alpha=rnorm(ns),
phin=rnorm(ns), deltaprior=abs(rnorm(1))))
} else if (modelChoice == 2) {
mychains <- 2
myiterations <- 8000
mywarmup <- 1000
myinits <- list(
list(mu=.3, sigma=.5, delta=1, sigmaalpha=1, deltaprior=abs(rnorm(1)),
raw_a=rnorm(ns), raw_p=rnorm(ns)),
list(mu=.8, sigma=1.5, delta=.5, sigmaalpha=1.5, deltaprior=abs(rnorm(1)),
raw_a=rnorm(ns), raw_p=rnorm(ns)))
}
parameters = c("delta")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=myiterations,
chains=mychains,
thin=1,
warmup=mywarmup,  # Stands for burn-in; Default = iter/2
# seed=123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
delta.posterior <- extract(samples)$delta
#============ BFs based on logspline fit ===========================
library(polspline) # this package can be installed from within R
fit.posterior <- logspline(delta.posterior, lbound=0)
# 95% confidence interval:
x0 <- qlogspline(0.025,fit.posterior)
x1 <- qlogspline(0.975,fit.posterior)
posterior     <- dlogspline(0, fit.posterior) # this gives the pdf at point delta = 0
prior         <- 2 * dnorm(0)  # height of order--restricted prior at delta = 0
BF01          <- posterior/prior
# BF01 = 0.22, BF10 = 4.49
#####################################################################
### Plot Prior and Posterior under order-restriction that delta > 0
#####################################################################
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
Nbreaks <- 80
y <- hist(delta.posterior, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=2,
xlim=c(0,4), ylim=c(0,1.5), xlab=" ", ylab="Density", axes=F)
lines(c(0,0), c(0,3), col="white", lwd=4)
axis(1, at = c(0,1,2,3,4), lab=c("0", "1", "2", "3", "4"))
axis(2)
mtext(expression(delta), side=1, line = 2.8, cex=2)
#now bring in log spline density estimation:
par(new=T)
plot(fit.posterior, ylim=c(0,1.5), xlim=c(0,4), lty=1, lwd=1, axes=F)
points(0, dlogspline(0, fit.posterior),pch=19, cex=2)
# plot the prior:
par(new=T)
plot (function( x ) 2*dnorm( x, 0, 1 ), ylim=c(0,1.5), xlim=c(0,4), lwd=2,
lty=1, ylab=" ", xlab = " ")
points(0, 2*dnorm(0), pch=19, cex=2)
text(0.8, 1, labels = "Posterior", cex = 1.5, pos=4)
text(1.7, 0.25, labels = "Prior", cex=1.5, pos=4)
