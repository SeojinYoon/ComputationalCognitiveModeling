BF01      <- posterior/prior
BF01
#============ Plot Prior and Posterior  ===========================
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
xlow  <- -3
xhigh <- 0
yhigh <- 12
Nbreaks <- 80
y       <- hist(delta.posterior, Nbreaks, plot=F)
if (system_info["sysname"] == "Windows") {
windows() #this command works only under Windows!
} else {
# Run a different function or do nothing for non-Windows OS
# library(grDevices)
# x11(width = 10, height = 5)
quartz()
}
library(rstan)
model <- "
// One-Sample Order Restricted Comparsion of Means
data {
int<lower=0> ndata;
vector[ndata] x;
}
parameters {
real sigmatmp;
real<upper=0> delta;
}
transformed parameters {
real<lower=0> sigma;
real mu;
sigma <- fabs(sigmatmp);
mu <- delta * sigma;
}
model {
// Delta and sigma Come From (Half) Cauchy Distributions
sigmatmp ~ cauchy(0, 1);
delta ~ cauchy(0, 1)T[,0];
// Data
x ~ normal(mu, sigma);
}"
# Read data Dr. Smith
Winter <- c(-0.05,0.41,0.17,-0.13,0.00,-0.05,0.00,0.17,0.29,0.04,0.21,0.08,0.37,
0.17,0.08,-0.04,-0.04,0.04,-0.13,-0.12,0.04,0.21,0.17,0.17,0.17,
0.33,0.04,0.04,0.04,0.00,0.21,0.13,0.25,-0.05,0.29,0.42,-0.05,0.12,
0.04,0.25,0.12)
Summer <- c(0.00,0.38,-0.12,0.12,0.25,0.12,0.13,0.37,0.00,0.50,0.00,0.00,-0.13,
-0.37,-0.25,-0.12,0.50,0.25,0.13,0.25,0.25,0.38,0.25,0.12,0.00,0.00,
0.00,0.00,0.25,0.13,-0.25,-0.38,-0.13,-0.25,0.00,0.00,-0.12,0.25,
0.00,0.50,0.00)
x <- Winter - Summer  # allowed because it is a within-subjects design
x <- x / sd(x)        # standardize
ndata <- length(Winter)  # number of subjects
data <- list(x=x, ndata=ndata)  # to be passed on to Stan
myinits <- list(
list(delta=-abs(rnorm(1,0,1)), deltaprior=-abs(rnorm(1,0,1)), sigmatmp=.1),
list(delta=-abs(rnorm(1,0,1)), deltaprior=-abs(rnorm(1,0,1)), sigmatmp=.2),
list(delta=-abs(rnorm(1,0,1)), deltaprior=-abs(rnorm(1,0,1)), sigmatmp=.3))
# Parameters to be monitored
parameters <- c("delta")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=30000,
chains=3,
thin=1,
# warmup=100,  # Stands for burn-in; Default = iter/2
# seed=123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
plot(samples)
# Collect posterior samples across all chains:
delta.posterior <- extract(samples)$delta
#============ BFs based on logspline fit ===========================
library(polspline) # this package can be installed from within R
fit.posterior <- logspline(delta.posterior)
#============ BFs based on logspline fit ===========================
fit.posterior <- logspline(delta.posterior,ubound=0) # NB. note the bound
# 95% confidence interval:
x0 <- qlogspline(0.025,fit.posterior)
x1 <- qlogspline(0.975,fit.posterior)
posterior <- dlogspline(0, fit.posterior) # this gives the pdf at point delta = 0
prior     <- 2*dcauchy(0)       # height of order--restricted prior at delta = 0
BF01      <- posterior/prior
BF01
#============ Plot Prior and Posterior  ===========================
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
xlow  <- -3
xhigh <- 0
yhigh <- 12
Nbreaks <- 80
y       <- hist(delta.posterior, Nbreaks, plot=F)
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (system_info["sysname"] == "Windows") {
windows() #this command works only under Windows!
} else {
# Run a different function or do nothing for non-Windows OS
# library(grDevices)
# x11(width = 10, height = 5)
quartz()
}
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=2,
xlim=c(xlow,xhigh), ylim=c(0,yhigh), xlab=" ", ylab="Density", axes=F)
axis(1, at = c(-3,-2,-1,0), lab=c("-3","-2","-1","0"))
axis(2)
mtext(expression(delta), side=1, line = 2.8, cex=2)
#now bring in log spline density estimation:
par(new=T)
plot(fit.posterior, ylim=c(0,yhigh), xlim=c(xlow,xhigh), lty=1, lwd=1, axes=F)
points(0, dlogspline(0, fit.posterior),pch=19, cex=2)
# plot the prior:
par(new=T)
plot ( function( x ) 2*dcauchy( x, 0, 1 ), xlow, xhigh, ylim=c(0,yhigh),
xlim=c(xlow,xhigh), lwd=2, lty=1, ylab=" ", xlab = " ", axes=F)
axis(1, at = c(-3,-2,-1,0), lab=c("-3","-2","-1","0"))
axis(2)
points(0, 2*dcauchy(0), pch=19, cex=2)
library(rstan)
model <- "
// One-Sample Comparsion of Means
data {
int<lower=0> ndata;
vector[ndata] x;
}
parameters {
real sigmatmp;
real delta;
}
transformed parameters {
real mu;
real<lower=0> sigma;
sigma = fabs(sigmatmp);
mu = delta * sigma;
}
model {
// Delta and sigma Come From (Half) Cauchy Distributions
sigmatmp ~ cauchy(0, 1);
delta ~ cauchy(0, 1);
// Data
x ~ normal(mu, sigma);
}"
# Read data Dr. Smith
Winter <- c(-0.05,0.41,0.17,-0.13,0.00,-0.05,0.00,0.17,0.29,0.04,0.21,0.08,0.37,
0.17,0.08,-0.04,-0.04,0.04,-0.13,-0.12,0.04,0.21,0.17,0.17,0.17,
0.33,0.04,0.04,0.04,0.00,0.21,0.13,0.25,-0.05,0.29,0.42,-0.05,0.12,
0.04,0.25,0.12)
Summer <- c(0.00,0.38,-0.12,0.12,0.25,0.12,0.13,0.37,0.00,0.50,0.00,0.00,-0.13,
-0.37,-0.25,-0.12,0.50,0.25,0.13,0.25,0.25,0.38,0.25,0.12,0.00,0.00,
0.00,0.00,0.25,0.13,-0.25,-0.38,-0.13,-0.25,0.00,0.00,-0.12,0.25,
0.00,0.50,0.00)
x <- Winter - Summer  # allowed because it is a within-subjects design
x <- x / sd(x)        # standardize
ndata <- length(Winter) # number of subjects
data <- list(x=x, ndata=ndata) # to be passed on to Stan
myinits <- list(
list(delta=rnorm(1,0,3), deltaprior=rnorm(1,0,3), sigmatmp = rnorm(1,0,1)),
list(delta=rnorm(1,0,3), deltaprior=rnorm(1,0,3), sigmatmp = rnorm(1,0,1)),
list(delta=rnorm(1,0,3), deltaprior=rnorm(1,0,3), sigmatmp = rnorm(1,0,1)))
# Parameters to be monitored
parameters <- c("delta")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=3,
thin=1
# warmup=100,  # Stands for burn-in; Default = iter/2
# seed=123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
system_info <- Sys.info() # Get system information
os <- system_info["sysname"] # Extract and print the operating system
if (system_info["sysname"] == "Windows") {
windows() #this command works only under Windows!
} else {
# Run a different function or do nothing for non-Windows OS
# library(grDevices)
# x11()
quartz()
}
plot(samples)
# Collect posterior samples across all chains:
delta.posterior <- extract(samples)$delta
#============ BFs based on logspline fit ===========================
library(logspline) # this package can be installed from within R
fit.posterior <- logspline(delta.posterior)
# 95% confidence interval:
x0 <- qlogspline(0.025,fit.posterior)
x1 <- qlogspline(0.975,fit.posterior)
posterior <- dlogspline(0, fit.posterior) # this gives the pdf at point delta = 0
prior     <- dcauchy(0)          # height of order-restricted prior at delta = 0
BF01      <- posterior/prior
BF01
#============ Plot Prior and Posterior  ===========================
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
xlow  <- -3
xhigh <- 3
yhigh <- 4
Nbreaks <- 80
y       <- hist(delta.posterior, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=2,
xlim=c(xlow,xhigh), ylim=c(0,yhigh), xlab=" ", ylab="Density", axes=F)
axis(1, at = c(-4,-3,-2,-1,0,1,2,3,4), lab=c("-4","-3","-2","-1","0",
"1", "2", "3", "4"))
axis(2)
mtext(expression(delta), side=1, line = 2.8, cex=2)
#now bring in log spline density estimation:
par(new=T)
plot(fit.posterior, ylim=c(0,yhigh), xlim=c(xlow,xhigh), lty=1, lwd=1, axes=F)
points(0, dlogspline(0, fit.posterior),pch=19, cex=2)
# plot the prior:
par(new=T)
plot(function( x ) dcauchy( x, 0, 1 ), xlow, xhigh, ylim=c(0,yhigh),
xlim=c(xlow,xhigh), lwd=2, lty=1, ylab=" ", xlab = " ", axes=F)
axis(1, at = c(-4,-3,-2,-1,0,1,2,3,4), lab=c("-4","-3","-2","-1","0",
"1", "2", "3", "4"))
axis(2)
points(0, dcauchy(0), pch=19, cex=2)
library(rstan)
model <- "
// Two-sample Comparison of Means
data {
int<lower=1> n1;
int<lower=1> n2;
vector[n1] x;
vector[n2] y;
}
parameters {
real mu;
real sigmatmp;
real delta;
}
transformed parameters {
real<lower=0> sigma;
real alpha;
sigma <- fabs(sigmatmp);
alpha <- delta * sigma;
}
model {
// Delta, mu, and sigma Come From (Half) Cauchy Distribution
mu ~ cauchy(0, 1);
sigmatmp ~ cauchy(0, 1);
delta ~ cauchy(0, 1);
// Data
x ~ normal(mu + alpha / 2, sigma);
y ~ normal(mu - alpha / 2, sigma);
}"
x <- c(70,80,79,83,77,75,84,78,75,75,78,82,74,81,72,70,75,72,76,77)
y <- c(56,80,63,62,67,71,68,76,79,67,76,74,67,70,62,65,72,72,69,71)
n1 <- length(x)
n2 <- length(y)
# Rescale
y <- y - mean(x)
y <- y / sd(x)
x <- (x - mean(x)) / sd(x);
data <- list(x=x, y=y, n1=n1, n2=n2) # to be passed on to Stan
myinits <- list(
list(delta=rnorm(1,0,3), deltaprior=rnorm(1,0,3), mu=rnorm(1,0,1),
sigmatmp=runif(1,0,5)),
list(delta=rnorm(1,0,3), deltaprior=rnorm(1,0,3), mu=rnorm(1,0,1),
sigmatmp=runif(1,0,5)),
list(delta=rnorm(1,0,3), deltaprior=rnorm(1,0,3), mu=rnorm(1,0,1),
sigmatmp=runif(1,0,5)))
# Parameters to be monitored
parameters <- c("delta")
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=3,
thin=1,
warmup=5000,  # Stands for burn-in; Default = iter/2
# seed=123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection.
plot(samples)
# Collect posterior samples across all chains:
delta.posterior <- extract(samples)$delta
#============ BFs based on logspline fit ===========================
library(polspline) # this package can be installed from within R
fit.posterior <- logspline(delta.posterior)
# 95% confidence interval:
x0 <- qlogspline(0.025,fit.posterior)
x1 <- qlogspline(0.975,fit.posterior)
posterior <- dlogspline(0, fit.posterior) # this gives the pdf at point delta = 0
prior     <- dcauchy(0)         # height of order--restricted prior at delta = 0
BF01      <- posterior/prior
BF01
#============ Plot Prior and Posterior  ===========================
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
xlow  <- -3
xhigh <- 3
yhigh <- 2
Nbreaks <- 80
y       <- hist(delta.posterior, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=2,
xlim=c(xlow,xhigh), ylim=c(0,yhigh), xlab=" ", ylab="Density", axes=F)
axis(1, at = c(-4,-3,-2,-1,0,1,2,3,4), lab=c("-4","-3","-2","-1","0",
"1", "2", "3", "4"))
axis(2)
mtext(expression(delta), side=1, line = 2.8, cex=2)
#now bring in log spline density estimation:
par(new=T)
plot(fit.posterior, ylim=c(0,yhigh), xlim=c(xlow,xhigh), lty=1, lwd=1, axes=F)
points(0, dlogspline(0, fit.posterior),pch=19, cex=2)
# plot the prior:
par(new=T)
plot ( function( x ) dcauchy( x, 0, 1 ), xlow, xhigh, ylim=c(0,yhigh),
xlim=c(xlow,xhigh), lwd=2, lty=1, ylab=" ", xlab = " ", axes=F)
axis(1, at = c(-4,-3,-2,-1,0,1,2,3,4), lab=c("-4","-3","-2","-1","0",
"1", "2", "3", "4"))
axis(2)
points(0, dcauchy(0), pch=19, cex=2)
library(rstan)
model <- "
// Geurts
data {
int<lower=1> nsc;
int<lower=1> nsa;
int<lower=0> nc[nsc];
int<lower=0> kc[nsc];
int<lower=0> na[nsa];
int<lower=0> ka[nsa];
}
parameters {
vector[nsa] phia;
vector[nsc] phic;
real<lower=0,upper=10> sigma;
real mu;
real delta;
real deltaprior;
}
transformed parameters {
vector<lower=0,upper=1>[nsa] thetaa;
vector<lower=0,upper=1>[nsc] thetac;
real alpha;
alpha <- sigma * delta;
for (i in 1:nsc)
thetac[i] <- Phi(phic[i]);
for (j in 1:nsa)
thetaa[j] <- Phi(phia[j]);
}
model {
// Priors
mu ~ normal(0, 1);
delta ~ normal(0, 1);
// Sampling from Prior Distribution for Delta
deltaprior ~ normal(0, 1);
phic ~ normal(mu + alpha / 2, sigma);
phia ~ normal(mu - alpha / 2, sigma);
kc ~ binomial(nc, thetac);
ka ~ binomial(na, thetaa);
}"
### Geurts data:
# Normal Controls:
num.errors <- c(15,10,61,11,60,44,63,70,57,11,67,21,89,12,63,11,96,10,37,19,44,
18,78,27,60,14)
nc         <- c(89,74,128,87,128,121,128,128,128,78,128,106,128,83,128,100,128,
73,128,86,128,86,128,100,128,79)
kc         <- nc - num.errors
nsc        <- length(kc)
# ADHD:
num.errors <- c(88,50,58,17,40,18,21,50,21,69,19,29,11,76,46,36,37,72,27,92,13,
39,53,31,49,57,17,10,12,21,39,43,49,17,39,13,68,24,21,27,48,54,
41,75,38,76,21,41,61,24,28,21)
na         <- c(128,128,128,86,128,117,89,128,110,128,93,107,87,128,128,113,128,
128,98,128,93,116,128,116,128,128,93,86,86,96,128,128,128,86,128,
78,128,111,100,95,128,128,128,128,128,128,98,127,128,93,110,96)
ka         <- na - num.errors
nsa        <- length(ka)
# two-sided p-value = .72
t.test(kc / nc, ka / na, alternative=c("two.sided"), paired=F)
data <- list(nc=nc,kc=kc,nsc=nsc,na=na,ka=ka,nsa=nsa) # to be passed on to Stan
myinits <- list(
list(mu=0, sigma=1, delta=0, phia=rnorm(nsa), phic=rnorm(nsc), deltaprior=0),
list(mu=-.8, sigma=2, delta=-.5, phia=rnorm(nsa), phic=rnorm(nsc),
deltaprior=-.5),
list(mu=.8, sigma=1.5, delta=.5, phia=rnorm(nsa), phic=rnorm(nsc),
deltaprior=.5))
parameters <- c("delta", "mu", "sigma")  # parameters to be monitored
# The following command calls Stan with specific options.
# For a detailed description type "?rstan".
samples <- stan(model_code=model,
data=data,
init=myinits,  # If not specified, gives random inits
pars=parameters,
iter=20000,
chains=3,
thin=1,
# warmup=100,  # Stands for burn-in; Default = iter/2
# seed=123  # Setting seed; Default is random seed
)
# Now the values for the monitored parameters are in the "samples" object,
# ready for inspection, e.g.;
traceplot(samples, inc_warmup=FALSE)
# Collect posterior samples across all chains:
delta.posterior <- extract(samples)$delta
#============ Unrestricted analysis      ===========================
#============ BFs based on logspline fit ===========================
library(polspline) # this package can be installed from within R
fit.posterior <- logspline(delta.posterior)
# 95% confidence interval:
(x0 <- qlogspline(0.025,fit.posterior))
(x1 <- qlogspline(0.975,fit.posterior))
posterior <- dlogspline(0, fit.posterior) # this gives the pdf at point delta = 0
prior     <- dnorm(0)            # height of order-restricted prior at delta = 0
(BF01      <- posterior/prior)
# BF01 = 3.96, BF10 = 0.25
#####################################################################
### Plot Prior and Posterior
#####################################################################
par(cex.main = 1.5, mar = c(5, 6, 4, 5) + 0.1, mgp = c(3.5, 1, 0), cex.lab = 1.5,
font.lab = 2, cex.axis = 1.3, bty = "n", las=1)
Nbreaks <- 80
y <- hist(delta.posterior, Nbreaks, plot=F)
plot(c(y$breaks, max(y$breaks)), c(0,y$density,0), type="S", lwd=2, lty=2,
xlim=c(-3,3), ylim=c(0,2), xlab=" ", ylab="Density", axes=F)
axis(1, at = c(-3,-2,-1,0,1,2,3), lab=c("-3","-2", "-1", "0", "1", "2", "3"))
axis(2)
mtext(expression(delta), side=1, line = 2.8, cex=2)
#now bring in log spline density estimation:
par(new=T)
plot(fit.posterior, ylim=c(0,2), xlim=c(-3,3), lty=1, lwd=1, axes=F)
points(0, dlogspline(0, fit.posterior),pch=19, cex=2)
# plot the prior:
curve(dnorm( x, 0, 1 ), -3, 3, xlim=c(-3,3), ylim=c(0,2), lwd=2,
lty=1, ylab=" ", xlab = " ", add = TRUE)
points(0, dnorm(0), pch=19, cex=2)
text(0.3, 1.5, labels = "Posterior", cex = 1.5, pos=4)
text(1, 0.3, labels = "Prior", cex=1.5, pos=4)
### WARNING: Run PsychometricFunction1.R first and do not close the R window.
library(rstan)
model <- "
// Logistic Psychophysical Function with Contaminants
data {
int<lower = 1> nsubjs; // n of participants (row)
int<lower = 1> nstim[nsubjs]; // n of stimuli (columns excluding NAs/-99)
int n[nsubjs,28]; // n of times the participant is exposed to the stimulus
int r[nsubjs,28]; // n of times the participant judges the stimulus as longer
int x[nsubjs,28]; // stimulus intensity
vector[nsubjs] xmean; // mean intensity by subject
}
parameters {
real mua; // pop level intercept estimate
real mub; // pop level slope estimate
real mup; // pop level probability of contaminant (not paying attention)
real<lower=0,upper=1000> sigmaa; // Uniform prior(0, 1000), pop level variance of intercept estimate
real<lower=0,upper=1000> sigmab; // Uniform prior(0, 1000), pop level variance of slope estimate
real<lower=0,upper=3> sigmap; // Uniform prior(0, 3)
vector[nsubjs] alpha; // individual level intercept estimate
vector[nsubjs] beta; // individual level slope estimate
vector[nsubjs] probitphi; // individual level probability of contaminant
matrix<lower=0,upper=1>[nsubjs,28] pi; //  success rate when contaminant process is on (not sure why it's by trial by participant)
}
transformed parameters {
vector[2] lp_parts[nsubjs,28]; // probability of contaminant by participant by trial
vector<lower=0,upper=1>[nsubjs] phi; // probability of contaminant by participant
for (i in 1:nsubjs)
phi[i] <- Phi(probitphi[i]);
for (i in 1:nsubjs) {
for (j in 1:nstim[i]) {
real theta;
theta <- inv_logit(alpha[i] + beta[i] * (x[i,j] - xmean[i]));
lp_parts[i,j,1] <- log1m(phi[i]) + binomial_lpmf(r[i,j] | n[i,j], theta);
lp_parts[i,j,2] <- log(phi[i]) + binomial_lpmf(r[i,j] | n[i,j], pi[i,j]);
}
}
}
model {
// Priors
mua ~ normal(0, inv_sqrt(.001));
mub ~ normal(0, inv_sqrt(.001));
mup ~ normal(0, 1);
for (i in 1:nsubjs)
pi[i] ~ beta(1, 1);  // can be removed
alpha ~ normal(mua, sigmaa);
beta ~ normal(mub, sigmab);
probitphi ~ normal(mup, sigmap);
for (i in 1:nsubjs)
for (j in 1:nstim[i])
increment_log_prob(log_sum_exp(lp_parts[i,j]));
}
generated quantities {
// SJ; I changed the line from int<lower=0,upper=1> z[nsubjs,28]; to int z[nsubjs,28];
// SJ; Because it causes z[sym1__, sym2__] is -2147483648 error.
int z[nsubjs,28];
for (i in 1:nsubjs) {
for (j in 1:nstim[i]) {
vector[2] prob;
prob <- softmax(lp_parts[i,j]);
z[i,j] <- bernoulli_rng(prob[2]);
}
}
}"
x <- as.matrix(read.table("data_x.txt", sep="\t"))
