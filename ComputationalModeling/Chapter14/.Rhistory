library(rtdists)
#generate RTs from the LBA as data
v   <- c(.55,.65,.8,1.05)
A   <- .7
b   <- .71
t0  <- .35
sv  <- .25
st0 <- 0
npc <- 1000        #n per condition
nv  <- length(v)  #n conditions
movedata <- NULL
qtiles <- seq(from=.1, to=.9, by=.2)
forqpfplot <- matrix(0,length(qtiles),nv*2)
pLow <- pUp <- rep(0,nv)
for (i in c(1:length(v))) {
rt41cond <- rLBA(npc, A, b, t0, mean_v=c(v[i],1-v[i]),sd_v=c(sv,sv))
movedata <- rbind(movedata,rt41cond)
pLow[i] <- sum(rt41cond$response==2)/npc
pUp[i]  <- sum(rt41cond$response==1)/npc
forqpfplot[,nv+1-i] <- quantile(rt41cond$rt[rt41cond$response==2],qtiles)*1000
forqpfplot[,i+nv]   <- quantile(rt41cond$rt[rt41cond$response==1],qtiles)*1000
}
#plot the synthetic data in QPFs
x11()
plot(0,0,type="n",las=1,
ylim=c(0,max(forqpfplot)+200),xlim=c(0,1),
xlab="Response proportion",
ylab="RT quantile (ms)")
apply(forqpfplot,1, FUN=function(x) points(c(rev(pLow),pUp),x,pch=4) )
#function returns -loglikelihood of predictions
LBAloglik <- function(pars, rt, response)
{
if (any(pars<0)) return(1e6+1e3*rnorm(1))
ptrs <- grep("v[1-9]",names(pars))
eachn <- length(rt)/length(ptrs)
likelihoods <- NULL
for (i in c(1:length(ptrs))) {
likelihoods <- c(likelihoods,
tryCatch(dLBA(rt[((i-1)*eachn+1):(i*eachn)],
response=response[((i-1)*eachn+1):(i*eachn)],
A=pars["A"],
b=pars["b"],
t0=pars["t0"],
mean_v=c(pars[ptrs[i]],1-pars[ptrs[i]]),
sd_v=c(pars["sv"],pars["sv"])),
error = function(e) 0))
}
if (any(likelihoods==0)) return(1e6+1e3*rnorm(1))
return(-sum(log(likelihoods)))
}
#generate starting values for parameters
sparms <- c(.7, .71, .35, v+rnorm(1,0,.05), .25)
names(sparms) <- c("A", "b", "t0", paste("v",1:nv,sep=""), "sv")
#now estimate the parameters
fit2rts <- optim(sparms, LBAloglik, gr = NULL, rt=movedata$rt, response=movedata$response)
#function returns -loglikelihood of predictions
diffusionloglik <- function(pars, rt, response)
{
likelihoods <- tryCatch(ddiffusion(rt, response=response,
a=pars["a"],
v=pars["v"],
t0=pars["t0"],
z=0.5*pars["a"],
sz=pars["sz"],
st0=pars["st0"],
sv=pars["sv"],s=.1,precision=1),
error = function(e) 0)
if (any(likelihoods==0)) return(1e6)
return(-sum(log(likelihoods)))
}
library(rtdists)
#generate RTs from the diffusion model as data
genparms <- c(.1,.2,.5,.05,.2,.05)
names(genparms) <- c("a", "v", "t0", "sz", "st0", "sv")
rts <- rdiffusion(500, a=genparms["a"],
v=genparms["v"],
t0=genparms["t0"],
z=0.5*genparms["a"],d=0,
sz=genparms["sz"],
sv=genparms["sv"],
st0=genparms["st0"],s=.1)
#generate starting values for parameters
sparms <- c(runif(1, 0.01, 0.4),
runif(1, 0.01, 0.5),
0.3,
runif(1, 0.02, 0.08),
runif(1, .1, .3),
runif(1, 0, 0.1))
names(sparms) <- c("a", "v", "t0", "sz", "st0", "sv")
#now estimate parameters
fit2rts <- optim(sparms, diffusionloglik, gr = NULL,
rt=rts$rt, response=rts$response)
round(fit2rts$par, 3)
library(rtdists)
#generate RTs from the diffusion model as data
v  <- c(.042,.079,.133,.227,.291,.369)
a  <- .11
z  <- 0.5*a
d  <- 0
sz <- 0
t0 <- 0.3
st0<- 0.2
sv <- 0
npc <- 1000       #n per condition
nv  <- length(v)  #n conditions
set.seed(8)       # for reproducibility
movedata <- NULL
qtiles <- seq(from=.1, to=.9, by=.2)
forqpfplot <- matrix(0,length(qtiles),nv*2)
pLow <- pUp <- rep(0,nv)
for (i in c(1:nv)) {
rt41cond <- rdiffusion(npc,a=a,v=v[i],t0=t0,z=z,d=d,sz=sz,sv=sv,st0=st0,s=.1, precision=3)
movedata <- rbind(movedata,rt41cond)
pLow[i] <- sum(rt41cond$response=="lower")/npc
pUp[i]  <- sum(rt41cond$response=="upper")/npc
forqpfplot[,nv+1-i] <- quantile(rt41cond$rt[rt41cond$response=="lower"],qtiles)*1000
forqpfplot[,i+nv]   <- quantile(rt41cond$rt[rt41cond$response=="upper"],qtiles)*1000
}
#plot the synthetic data in QPFs
x11()
plot(0,0,type="n",las=1,
ylim=c(0,max(forqpfplot)+200),xlim=c(0,1),
xlab="Response proportion",
ylab="RT quantile (ms)")
apply(forqpfplot,1, FUN=function(x) points(c(rev(pLow),pUp),x,pch=4) )
#function returns -loglikelihood of predictions
diffusionloglik2 <- function(pars, rt, response)
{
if (any(pars<0)) return(1e6+1e3*rnorm(1))
ptrs <- grep("v[1-9]",names(pars))
eachn <- length(rt)/length(ptrs)
likelihoods <- NULL
for (i in c(1:length(ptrs))) {
likelihoods <- c(likelihoods,
tryCatch(ddiffusion(rt[((i-1)*eachn+1):(i*eachn)],
response=response[((i-1)*eachn+1):(i*eachn)],
a=pars["a"],
v=pars[ptrs[i]],
t0=pars["t0"],
z=0.5*pars["a"],d=0,
sz=pars["sz"],
st0=pars["st0"],
sv=pars["sv"],s=.1,precision=3),
error = function(e) 0))
}
if (any(likelihoods==0)) return(1e6+1e3*rnorm(1))
return(-sum(log(likelihoods)))
}
#generate starting values for parameters
sparms <- c(runif(1, 0.1, 0.2),
v+rnorm(length(v),0,.05),
0.3,
0.05,
runif(1, 0, .2),
0.1)
names(sparms) <- c("a", paste("v",1:nv,sep=""), "t0", "sz", "st0", "sv")
#now estimate the parameters
fit2rts <- optim(sparms, diffusionloglik2, gr = NULL,
rt=movedata$rt, response=movedata$response)
round(fit2rts$par, 3)
#now obtain predictions from model for plotting
#first the maximum proportion
vfitted <- fit2rts$par[paste("v",1:nv,sep="")]
maxpUp <- pdiffusion(rep(Inf, length(vfitted)), response="upper",
a=fit2rts$par["a"],
v=vfitted,
t0=fit2rts$par["t0"],
z=0.5*fit2rts$par["a"],d=0,
sz=fit2rts$par["sz"],
sv=fit2rts$par["sv"],
st0=fit2rts$par["st0"],s=.1,precision=3)
maxpLr <- pdiffusion(rep(Inf, length(vfitted)), response="lower",
a=fit2rts$par["a"],
v=vfitted,
t0=fit2rts$par["t0"],
z=0.5*fit2rts$par["a"],d=0,
sz=fit2rts$par["sz"],
sv=fit2rts$par["sv"],
st0=fit2rts$par["st0"],s=.1,precision=3)
#now RT quantiles
forqpfplot2 <- matrix(0,length(qtiles),nv*2)
for (i in c(1:nv)) {
forqpfplot2[,i]   <- qdiffusion(qtiles*maxpLr[nv+1-i],
response="lower",
a=fit2rts$par["a"],
v=vfitted[nv+1-i],
t0=fit2rts$par["t0"],
z=0.5*fit2rts$par["a"],d=0,
sz=fit2rts$par["sz"],
sv=fit2rts$par["sv"],
st0=fit2rts$par["st0"],s=.1,precision=3)*1000
forqpfplot2[,nv+i] <- qdiffusion(qtiles*maxpUp[i],
response="upper",
a=fit2rts$par["a"],
v=vfitted[i],
t0=fit2rts$par["t0"],
z=0.5*fit2rts$par["a"],d=0,
sz=fit2rts$par["sz"],
sv=fit2rts$par["sv"],
st0=fit2rts$par["st0"],s=.1,precision=3)*1000
}
apply(forqpfplot2,1, FUN=function(x) lines(c(rev(maxpLr),maxpUp),x) )
#function to plot a quantile probability function
qpf <- function(a,v,t0,sz,sv,st0) {
d  <- 0       #no preference for either boundary
z  <- 0.5*a   #starting point in the middle
#get maximum response probabilities
#with infinite RT
maxpUp <- pdiffusion(rep(Inf, length(v)), response="upper",
a=a,v=v,t0=t0,z=z,d=d,sz=sz,sv=sv,st0=st0,s=0.1,precision=1)
maxpLr <- pdiffusion(rep(Inf, length(v)), response="lower",
a=a,v=v,t0=t0,z=z,d=d,sz=sz,sv=sv,st0=st0,s=0.1,precision=1)
#now obtain RTs in ms for quantiles and plot
qtiles <- seq(from=.1, to=.9, by=.2)
lmp <- length(maxpUp)
forqpfplot <- matrix(0,length(qtiles),lmp*2)
for (i in c(1:lmp)) {
forqpfplot[,i]     <- qdiffusion(qtiles*maxpLr[lmp+1-i],
response="lower",maxt=10,
a=a,v=v[lmp+1-i],t0=t0,z=z,d=d,sz=sz,sv=sv,st0=st0,s=0.1,precision=1)*1000
forqpfplot[,lmp+i] <- qdiffusion(qtiles*maxpUp[i],
response="upper",maxt=10,
a=a,v=v[i],t0=t0,d=d,z=z,sz=sz,sv=sv,st0=st0,s=0.1,precision=1)*1000
}
plot(0,0,type="n",las=1,
ylim=c(0,max(forqpfplot,na.rm=TRUE)+200),xlim=c(0,1),
xlab="Response proportion",
ylab="RT quantile (ms)")
apply(forqpfplot,1, FUN=function(x) lines(c(rev(maxpLr),maxpUp),x) )
apply(forqpfplot,1, FUN=function(x) points(c(rev(maxpLr),maxpUp),x,pch=4) )
text(.7,max(forqpfplot,na.rm=TRUE)+100,
substitute(paste("a=",anum,"; ",
s[z],"=",
sznum,"; ",
eta,"=",svnum,"; ",
s[t],"=",stnum),
list(anum=a,sznum=sz,svnum=sv,stnum=st0)))
}
library(rtdists)
#parameters are from Ratcliff & McKoon (2008)
#drift rates
v  <- c(.042,.079,.133,.227,.291,.369)
#call function to plot for various parameter values
x11()
par(mfcol=c(3,2),mar = c(4, 4, 1, 1) + 0.3)
qpf(a=.11, v, t0=0.3, sz=0,    sv=0.0,  st0=0.2)
qpf(a=.11, v, t0=0.3, sz=0,    sv=0.12, st0=0.2)
qpf(a=.11, v, t0=0.3, sz=0.07, sv=0.0,  st0=0.2)
qpf(a=.16, v, t0=0.3, sz=0.07, sv=0.12, st0=0.2)
qpf(a=.08, v, t0=0.3, sz=0.07, sv=0.12, st0=0.2)
qpf(a=.08, v, t0=0.3, sz=0.07, sv=0.12, st0=0)
library(rtdists)
#generate RTs from the LBA as data
v   <- c(.55,.65,.8,1.05)
A   <- .7
b   <- .71
t0  <- .35
sv  <- .25
st0 <- 0
npc <- 1000        #n per condition
nv  <- length(v)  #n conditions
movedata <- NULL
qtiles <- seq(from=.1, to=.9, by=.2)
forqpfplot <- matrix(0,length(qtiles),nv*2)
pLow <- pUp <- rep(0,nv)
for (i in c(1:length(v))) {
rt41cond <- rLBA(npc, A, b, t0, mean_v=c(v[i],1-v[i]),sd_v=c(sv,sv))
movedata <- rbind(movedata,rt41cond)
pLow[i] <- sum(rt41cond$response==2)/npc
pUp[i]  <- sum(rt41cond$response==1)/npc
forqpfplot[,nv+1-i] <- quantile(rt41cond$rt[rt41cond$response==2],qtiles)*1000
forqpfplot[,i+nv]   <- quantile(rt41cond$rt[rt41cond$response==1],qtiles)*1000
}
#plot the synthetic data in QPFs
x11()
plot(0,0,type="n",las=1,
ylim=c(0,max(forqpfplot)+200),xlim=c(0,1),
xlab="Response proportion",
ylab="RT quantile (ms)")
apply(forqpfplot,1, FUN=function(x) points(c(rev(pLow),pUp),x,pch=4) )
#function returns -loglikelihood of predictions
LBAloglik <- function(pars, rt, response)
{
if (any(pars<0)) return(1e6+1e3*rnorm(1))
ptrs <- grep("v[1-9]",names(pars))
eachn <- length(rt)/length(ptrs)
likelihoods <- NULL
for (i in c(1:length(ptrs))) {
likelihoods <- c(likelihoods,
tryCatch(dLBA(rt[((i-1)*eachn+1):(i*eachn)],
response=response[((i-1)*eachn+1):(i*eachn)],
A=pars["A"],
b=pars["b"],
t0=pars["t0"],
mean_v=c(pars[ptrs[i]],1-pars[ptrs[i]]),
sd_v=c(pars["sv"],pars["sv"])),
error = function(e) 0))
}
if (any(likelihoods==0)) return(1e6+1e3*rnorm(1))
return(-sum(log(likelihoods)))
}
#generate starting values for parameters
sparms <- c(.7, .71, .35, v+rnorm(1,0,.05), .25)
names(sparms) <- c("A", "b", "t0", paste("v",1:nv,sep=""), "sv")
#now estimate the parameters
fit2rts <- optim(sparms, LBAloglik, gr = NULL, rt=movedata$rt, response=movedata$response)
round(fit2rts$par, 3)
#now obtain predictions from model for plotting
#first the maximum proportion
vfitted <- fit2rts$par[paste("v",1:nv,sep="")]
maxpUp <- vapply(vfitted, FUN=function(x)
pLBA(100, response=2,
A=fit2rts$par["A"],
b=fit2rts$par["b"],
t0=fit2rts$par["t0"],
mean_v=c(x,1-x),
sd_v=c(fit2rts$par["sv"],fit2rts$par["sv"])),
numeric(1))
maxpLr <- 1-maxpUp
#now RT quantiles
forqpfplot2 <- matrix(0,length(qtiles),nv*2)
for (i in c(1:nv)) {
forqpfplot2[,i]   <- qLBA(qtiles*maxpLr[nv+1-i],
response=1,
A=fit2rts$par["A"],
b=fit2rts$par["b"],
t0=fit2rts$par["t0"],
mean_v=c(vfitted[nv+1-i],1-vfitted[nv+1-i]),
sd_v=c(fit2rts$par["sv"],fit2rts$par["sv"]))*1000
forqpfplot2[,nv+i] <- qLBA(qtiles*maxpUp[i],
response=2,
A=fit2rts$par["A"],
b=fit2rts$par["b"],
t0=fit2rts$par["t0"],
mean_v=c(vfitted[i],1-vfitted[i]),
sd_v=c(fit2rts$par["sv"],fit2rts$par["sv"]))*1000
}
apply(forqpfplot2,1, FUN=function(x) lines(c(rev(maxpLr),maxpUp),x) )
##########################
#sparms <-c(.11/ratcl2sing,v, 0.3,0,0.2,0)
diffusionloglik2 (sparms, movedata$rt, movedata$response)
