} else {
llratio <- exp((normlogLik(obsprecision,proposal,obs)+   #* \label{line:BayesianMCMC:mhpllratio}  *\#
normlogLik(priorprecision,proposal,priormu))-
(normlogLik(obsprecision,current,obs)+
normlogLik(priorprecision,current,priormu)))
chain[i] <- ifelse(runif(1) < llratio,proposal,current)
}
}
#use priors in MH algorithm for a normal distribution
######### this first version uses densities (dnorm)
plausrange <- c(200,600)
chain <- rep(0,5000)
burnin<-200
set.seed(1234)
propsd <- 5     #tuning parameter
p2f <- FALSE # do we plot to file?
obs <- 415
obssd <- 20
priormu <- 326
priorsd <- 88
chain[1] <- 500  #starting value
for (i in c(2:length(chain))) {
current <- chain[i-1]
proposal <- current + rnorm(1,0,propsd)
if((dnorm(obs,proposal,obssd)*
dnorm(proposal,priormu,priorsd)) >
(dnorm(obs,current,obssd)*
dnorm(current,priormu,priorsd)) ) {
chain[i] <- proposal  #accept proposal
} else {
llratio <- (dnorm(obs,proposal,obssd)*
dnorm(proposal,priormu,priorsd)) /
(dnorm(obs,current,obssd)*
dnorm(current,priormu,priorsd))
chain[i] <- ifelse(runif(1) < llratio,proposal,current)
}
}
print(c(mean(chain),var(chain)))
if (p2f) {
pdf(file=paste("npostwpriorsd",as.character(priorsd),".pdf",sep=""),height=5,width=5)
} else {x11(5,5)}
par(mar=c(4, 3, 1, 0.5))
plot(density(chain),las=1,xlab=bquote("Sampled values of "*mu),
yaxt="n",lwd=2,lty="dashed",
main="",xlim=plausrange,ylab="",
ylim=c(0,max(max(density(chain)$y),
max(density(chain[-c(1:burnin)])$y),
max(dnorm(min(plausrange):max(plausrange),obs,obssd)))*1.4))
lines(min(plausrange):max(plausrange),
dnorm(min(plausrange):max(plausrange),obs,obssd),
col="gray",lwd=5)
lines(min(plausrange):max(plausrange),
dnorm(min(plausrange):max(plausrange),priormu,priorsd),
col="gray",lwd=4,lty="dotdash")
lines(density(chain[-c(1:burnin)]),lwd=2,lty="solid")
mtext("   Density",2,1)
legend("topright",inset=.02,c("Normal PDF","All MCMC","Excluding burnin","Prior PDF"),
lty=c("solid","dashed","solid","dotdash"),col=c("gray","black","black","gray"),lwd=c(4,2,2,4))
if (p2f) {dev.off()}
x11() #caterpillar plot
plot(chain,type="l",las=1,xlab="Iteration",ylab="Value of accepted sample")
lines(1:burnin,chain[1:burnin],col="red")
############## below here deal with likelihood function not density
#normLik    <- function(precision,mu,x) { return(exp(-0.5*precision*(mu^2-2*x*mu))) }
normlogLik <- function(precision,mu,x) { return((-0.5*precision*(mu^2-2*x*mu))) } #* \label{line:BayesianMCMC:mhploglik}  *\#
obs <- 415                         #* \label{line:BayesianMCMC:mhpinit1}  *\#
obsprecision <- .0025
priormu <- 326
priorprecision <- .001293           #* \label{line:BayesianMCMC:mhpinit1}  *\#
set.seed(1234)
chain[1] <- 500  #starting value
for (i in c(2:length(chain))) {  #* \label{line:BayesianMCMC:mhploop}  *\#
current <- chain[i-1]
proposal <- current + rnorm(1,0,propsd)
if (normlogLik(obsprecision,proposal,obs)+                  #* \label{line:BayesianMCMC:mhpnewcomp}  *\#
normlogLik(priorprecision,proposal,priormu) >
normlogLik(obsprecision,current,obs)+
normlogLik(priorprecision,current,priormu)) {
chain[i] <- proposal  #accept proposal
} else {
llratio <- exp((normlogLik(obsprecision,proposal,obs)+   #* \label{line:BayesianMCMC:mhpllratio}  *\#
normlogLik(priorprecision,proposal,priormu))-
(normlogLik(obsprecision,current,obs)+
normlogLik(priorprecision,current,priormu)))
chain[i] <- ifelse(runif(1) < llratio,proposal,current)
}
}
print(c(mean(chain),var(chain)))
if (p2f) {
pdf(file=paste("npostwpriorsd",as.character(priorsd),".pdf",sep=""),height=5,width=5)
} else {x11(5,5)}
par(mar=c(4, 3, 1, 0.5))
plot(density(chain),las=1,xlab=bquote("Sampled values of "*mu),
yaxt="n",lwd=2,lty="dashed",
main="",xlim=plausrange,ylab="",
ylim=c(0,max(max(density(chain)$y),
max(density(chain[-c(1:burnin)])$y),
max(dnorm(min(plausrange):max(plausrange),obs,obssd)))*1.4))
print(c(mean(chain),var(chain)))
if (p2f) {
pdf(file=paste("npostwpriorsd",as.character(priorsd),".pdf",sep=""),height=5,width=5)
} else {x11(5,5)}
par(mar=c(4, 3, 1, 0.5))
plot(density(chain),las=1,xlab=bquote("Sampled values of "*mu),
yaxt="n",lwd=2,lty="dashed",
main="",xlim=plausrange,ylab="",
ylim=c(0,max(max(density(chain)$y),
max(density(chain[-c(1:burnin)])$y),
max(dnorm(min(plausrange):max(plausrange),obs,obssd)))*1.4))
lines(min(plausrange):max(plausrange),
dnorm(min(plausrange):max(plausrange),obs,obssd),
col="gray",lwd=5)
lines(min(plausrange):max(plausrange),
dnorm(min(plausrange):max(plausrange),priormu,priorsd),
col="gray",lwd=4,lty="dotdash")
lines(density(chain[-c(1:burnin)]),lwd=2,lty="solid")
mtext("   Density",2,1)
legend("topright",inset=.02,c("Normal PDF","All MCMC","Excluding burnin","Prior PDF"),
lty=c("solid","dashed","solid","dotdash"),col=c("gray","black","black","gray"),lwd=c(4,2,2,4))
if (p2f) {dev.off()}
x11() #caterpillar plot
plot(chain,type="l",las=1,xlab="Iteration",ylab="Value of accepted sample")
lines(1:burnin,chain[1:burnin],col="red")
############## below here deal with likelihood function not density
#normLik    <- function(precision,mu,x) { return(exp(-0.5*precision*(mu^2-2*x*mu))) }
normlogLik <- function(precision,mu,x) { return((-0.5*precision*(mu^2-2*x*mu))) } #* \label{line:BayesianMCMC:mhploglik}  *\#
obs <- 415                         #* \label{line:BayesianMCMC:mhpinit1}  *\#
obsprecision <- .0025
priormu <- 326
priorprecision <- .001293           #* \label{line:BayesianMCMC:mhpinit1}  *\#
set.seed(1234)
chain[1] <- 500  #starting value
for (i in c(2:length(chain))) {  #* \label{line:BayesianMCMC:mhploop}  *\#
current <- chain[i-1]
proposal <- current + rnorm(1,0,propsd)
if (normlogLik(obsprecision,proposal,obs)+                  #* \label{line:BayesianMCMC:mhpnewcomp}  *\#
normlogLik(priorprecision,proposal,priormu) >
normlogLik(obsprecision,current,obs)+
normlogLik(priorprecision,current,priormu)) {
chain[i] <- proposal  #accept proposal
} else {
llratio <- exp((normlogLik(obsprecision,proposal,obs)+   #* \label{line:BayesianMCMC:mhpllratio}  *\#
normlogLik(priorprecision,proposal,priormu))-
(normlogLik(obsprecision,current,obs)+
normlogLik(priorprecision,current,priormu)))
chain[i] <- ifelse(runif(1) < llratio,proposal,current)
}
}
print(c(mean(chain),var(chain)))
if (p2f) {
pdf(file=paste("npostwpriorsd",as.character(priorsd),".pdf",sep=""),height=5,width=5)
} else {x11(5,5)}
par(mar=c(4, 3, 1, 0.5))
plot(density(chain),las=1,xlab=bquote("Sampled values of "*mu),
yaxt="n",lwd=2,lty="dashed",
main="",xlim=plausrange,ylab="",
ylim=c(0,max(max(density(chain)$y),
max(density(chain[-c(1:burnin)])$y),
max(dnorm(min(plausrange):max(plausrange),obs,obssd)))*1.4))
lines(min(plausrange):max(plausrange),
dnorm(min(plausrange):max(plausrange),obs,obssd),
col="gray",lwd=5)
lines(min(plausrange):max(plausrange),
dnorm(min(plausrange):max(plausrange),priormu,priorsd),
col="gray",lwd=4,lty="dotdash")
lines(density(chain[-c(1:burnin)]),lwd=2,lty="solid")
mtext("   Density",2,1)
legend("topright",inset=.02,c("Normal PDF","All MCMC","Excluding burnin","Prior PDF"),
lty=c("solid","dashed","solid","dotdash"),col=c("gray","black","black","gray"),lwd=c(4,2,2,4))
if (p2f) {dev.off()}
x11() #caterpillar plot
plot(chain,type="l",las=1,xlab="Iteration",ylab="Value of accepted sample")
lines(1:burnin,chain[1:burnin],col="red")
print(c(mean(chain),var(chain)))
if (p2f) {
pdf(file=paste("npostwpriorsd",as.character(priorsd),".pdf",sep=""),height=5,width=5)
} else {x11(5,5)}
par(mar=c(4, 3, 1, 0.5))
plot(density(chain),las=1,xlab=bquote("Sampled values of "*mu),
yaxt="n",lwd=2,lty="dashed",
main="",xlim=plausrange,ylab="",
ylim=c(0,max(max(density(chain)$y),
max(density(chain[-c(1:burnin)])$y),
max(dnorm(min(plausrange):max(plausrange),obs,obssd)))*1.4))
lines(min(plausrange):max(plausrange),
dnorm(min(plausrange):max(plausrange),obs,obssd),
col="gray",lwd=5)
lines(min(plausrange):max(plausrange),
dnorm(min(plausrange):max(plausrange),priormu,priorsd),
col="gray",lwd=4,lty="dotdash")
lines(density(chain[-c(1:burnin)]),lwd=2,lty="solid")
mtext("   Density",2,1)
legend("topright",inset=.02,c("Normal PDF","All MCMC","Excluding burnin","Prior PDF"),
lty=c("solid","dashed","solid","dotdash"),col=c("gray","black","black","gray"),lwd=c(4,2,2,4))
if (p2f) {dev.off()}
x11() #caterpillar plot
plot(chain,type="l",las=1,xlab="Iteration",ylab="Value of accepted sample")
lines(1:burnin,chain[1:burnin],col="red")
#use priors in MH algorithm for a normal distribution
######### this first version uses densities (dnorm)
plausrange <- c(200,600)
chain <- rep(0,5000)
burnin<-200
set.seed(1234)
propsd <- 5     #tuning parameter
p2f <- FALSE # do we plot to file?
obs <- 415
obssd <- 20
priormu <- 326
priorsd <- 88
chain[1] <- 500  #starting value
for (i in c(2:length(chain))) {
current <- chain[i-1]
proposal <- current + rnorm(1,0,propsd)
if((dnorm(obs,proposal,obssd)*
dnorm(proposal,priormu,priorsd)) >
(dnorm(obs,current,obssd)*
dnorm(current,priormu,priorsd)) ) {
chain[i] <- proposal  #accept proposal
} else {
llratio <- (dnorm(obs,proposal,obssd)*
dnorm(proposal,priormu,priorsd)) /
(dnorm(obs,current,obssd)*
dnorm(current,priormu,priorsd))
chain[i] <- ifelse(runif(1) < llratio,proposal,current)
}
}
print(c(mean(chain),var(chain)))
if (p2f) {
pdf(file=paste("npostwpriorsd",as.character(priorsd),".pdf",sep=""),height=5,width=5)
} else {x11(5,5)}
par(mar=c(4, 3, 1, 0.5))
plot(density(chain),las=1,xlab=bquote("Sampled values of "*mu),
yaxt="n",lwd=2,lty="dashed",
main="",xlim=plausrange,ylab="",
ylim=c(0,max(max(density(chain)$y),
max(density(chain[-c(1:burnin)])$y),
max(dnorm(min(plausrange):max(plausrange),obs,obssd)))*1.4))
lines(min(plausrange):max(plausrange),
dnorm(min(plausrange):max(plausrange),obs,obssd),
col="gray",lwd=5)
lines(min(plausrange):max(plausrange),
dnorm(min(plausrange):max(plausrange),priormu,priorsd),
col="gray",lwd=4,lty="dotdash")
lines(density(chain[-c(1:burnin)]),lwd=2,lty="solid")
mtext("   Density",2,1)
legend("topright",inset=.02,c("Normal PDF","All MCMC","Excluding burnin","Prior PDF"),
lty=c("solid","dashed","solid","dotdash"),col=c("gray","black","black","gray"),lwd=c(4,2,2,4))
if (p2f) {dev.off()}
x11() #caterpillar plot
plot(chain,type="l",las=1,xlab="Iteration",ylab="Value of accepted sample")
lines(1:burnin,chain[1:burnin],col="red")
############## below here deal with likelihood function not density
#normLik    <- function(precision,mu,x) { return(exp(-0.5*precision*(mu^2-2*x*mu))) }
normlogLik <- function(precision,mu,x) { return((-0.5*precision*(mu^2-2*x*mu))) } #* \label{line:BayesianMCMC:mhploglik}  *\#
obs <- 415                         #* \label{line:BayesianMCMC:mhpinit1}  *\#
obsprecision <- .0025
priormu <- 326
priorprecision <- .001293           #* \label{line:BayesianMCMC:mhpinit1}  *\#
set.seed(1234)
chain[1] <- 500  #starting value
for (i in c(2:length(chain))) {  #* \label{line:BayesianMCMC:mhploop}  *\#
current <- chain[i-1]
proposal <- current + rnorm(1,0,propsd)
if (normlogLik(obsprecision,proposal,obs)+                  #* \label{line:BayesianMCMC:mhpnewcomp}  *\#
normlogLik(priorprecision,proposal,priormu) >
normlogLik(obsprecision,current,obs)+
normlogLik(priorprecision,current,priormu)) {
chain[i] <- proposal  #accept proposal
} else {
llratio <- exp((normlogLik(obsprecision,proposal,obs)+   #* \label{line:BayesianMCMC:mhpllratio}  *\#
normlogLik(priorprecision,proposal,priormu))-
(normlogLik(obsprecision,current,obs)+
normlogLik(priorprecision,current,priormu)))
chain[i] <- ifelse(runif(1) < llratio,proposal,current)
}
}
print(c(mean(chain),var(chain)))
if (p2f) {
pdf(file=paste("npostwpriorsd",as.character(priorsd),".pdf",sep=""),height=5,width=5)
} else {x11(5,5)}
par(mar=c(4, 3, 1, 0.5))
plot(density(chain),las=1,xlab=bquote("Sampled values of "*mu),
yaxt="n",lwd=2,lty="dashed",
main="",xlim=plausrange,ylab="",
ylim=c(0,max(max(density(chain)$y),
max(density(chain[-c(1:burnin)])$y),
max(dnorm(min(plausrange):max(plausrange),obs,obssd)))*1.4))
lines(min(plausrange):max(plausrange),
dnorm(min(plausrange):max(plausrange),obs,obssd),
col="gray",lwd=5)
lines(min(plausrange):max(plausrange),
dnorm(min(plausrange):max(plausrange),priormu,priorsd),
col="gray",lwd=4,lty="dotdash")
lines(density(chain[-c(1:burnin)]),lwd=2,lty="solid")
mtext("   Density",2,1)
legend("topright",inset=.02,c("Normal PDF","All MCMC","Excluding burnin","Prior PDF"),
lty=c("solid","dashed","solid","dotdash"),col=c("gray","black","black","gray"),lwd=c(4,2,2,4))
if (p2f) {dev.off()}
x11() #caterpillar plot
plot(chain,type="l",las=1,xlab="Iteration",ylab="Value of accepted sample")
lines(1:burnin,chain[1:burnin],col="red")
print(c(mean(chain),var(chain)))
if (p2f) {
pdf(file=paste("npostwpriorsd",as.character(priorsd),".pdf",sep=""),height=5,width=5)
} else {x11(5,5)}
par(mar=c(4, 3, 1, 0.5))
plot(density(chain),las=1,xlab=bquote("Sampled values of "*mu),
yaxt="n",lwd=2,lty="dashed",
main="",xlim=plausrange,ylab="",
ylim=c(0,max(max(density(chain)$y),
max(density(chain[-c(1:burnin)])$y),
max(dnorm(min(plausrange):max(plausrange),obs,obssd)))*1.4))
lines(min(plausrange):max(plausrange),
dnorm(min(plausrange):max(plausrange),obs,obssd),
col="gray",lwd=5)
lines(min(plausrange):max(plausrange),
dnorm(min(plausrange):max(plausrange),priormu,priorsd),
col="gray",lwd=4,lty="dotdash")
lines(density(chain[-c(1:burnin)]),lwd=2,lty="solid")
mtext("   Density",2,1)
legend("topright",inset=.02,c("Normal PDF","All MCMC","Excluding burnin","Prior PDF"),
lty=c("solid","dashed","solid","dotdash"),col=c("gray","black","black","gray"),lwd=c(4,2,2,4))
if (p2f) {dev.off()}
x11() #caterpillar plot
plot(chain,type="l",las=1,xlab="Iteration",ylab="Value of accepted sample")
lines(1:burnin,chain[1:burnin],col="red")
#mixture model set of functions. this is called from another program, typically the one that plots the data
library(circular)
#mixture model set of functions. this is called from another program, typically the one that plots the data
library(circular)
#pdf for mixture model (Suchow et al., 2013)
logmixturepdf <- function(data,g,sdv) {
data4vm <- mkcirc(data)
return(sum(log((1-g)*dvonmises(data4vm,mkcirc(0),sd2k(sdv))
+ g*dunif(data,-180,180))))
}
#convert SD into Kappa (Suchow et al., 2013)
sd2k<-function (d) { #input is in degrees
S <- (d/180)*pi  #go to radians
R <- exp(-S^2/2)
K = 1/(R^3 - 4*R^2 + 3*R)
if (R < 0.85) {K <- -0.4 + 1.39*R + 0.43/(1-R)}
if (R < 0.53) {K <- 2*R + R^3 + (5*R^5)/6}
return(K)
}
#jeffreys prior for precision (Suchow et al., 2013)
jp4kappa <- function(K) {
z <- exp((log(besselI(K,1,TRUE)) + K) -
(log(besselI(K,0,TRUE)) + K))
return(z * (K - z - K*z^2))
}
#jeffreys prior for a proportion
jp4prop <- function(p) {p^-0.5 * (1-p)^-0.5}
#get overall prior for model parameters
logprior<- function(g,sdv) {
return(log(jp4kappa(sd2k(sdv)))+log(jp4prop(g)))
}
#make it circular in degrees
mkcirc<-function(td)
{as.circular(td,control.circular=list(units="degrees"))}
#previous line must be 39
#main function that fits mixture model to data being passed as argument
#next line must be 43
getMixtmodel <-function(data,svalues) {
chain <- matrix(0,5000,2)
burnin<-500
set.seed(1234)
propsd <- svalues*.05
lb <- c(0,4)
ub <- c(1,360)
chain[1,] <- svalues #starting values for parameters
for (i in c(2:dim(chain)[1])) {
cur <- chain[i-1,]
doitagain <- TRUE
while (doitagain) {
propl <- cur + rnorm(2,0,propsd)
doitagain <- any(propl<lb) || any(propl>ub)
}
lpropval <- logmixturepdf(data,propl[1],propl[2])
+logprior(propl[1],propl[2])
lcurval  <- logmixturepdf(data,cur[1],cur[2])
+logprior(cur[1],cur[2])
llratio  <- exp(lpropval-lcurval)
if (runif(1) < llratio) {
chain[i,] <- propl
} else {
chain[i,] <- cur
}
}
finparm<-apply(chain[-c(1:burnin),],2,mean)
print(finparm)
td<-c(-180:180)
pred<-(1-finparm[1])*
dvonmises(mkcirc(td),mkcirc(0),sd2k(finparm[2]))+
finparm[1]*dunif(td,-180,180)
posterior<-chain[-c(1:burnin),]
return(list(preds=pred,posteriors=posterior))
}
#plot some vwm data
source("MixModel.R")
#choose data source by commenting out the undesired one
#fn <- "colorSubjccFromvdb2012.dat"
# you will need to obtain the data from Zhang and Luck (2008)
fn <- "zhl08subj1.dat"
vwmerrors <- read.table(fn,sep=",",col.names=c("setsize","errors"))
vwmerrors$errdiscrete<-cut(vwmerrors$error,breaks=seq(from=-180,to=180,by=20),labels=FALSE)
npss <- mean(as.numeric(table(vwmerrors$setsize)))
vwmmeans <- aggregate(errors~setsize+errdiscrete,data=vwmerrors,FUN=function(x) length(x)/npss)
p2f<-FALSE
#get predictions
svalues<-c(0.5,20)
preds<-posteriors<-vector("list",2)
ssz<-c(3,6)
for (s in c(1,2)) {
cp<-getMixtmodel(subset(vwmerrors,setsize==ssz[s])$errors,svalues)
preds[[s]] <- cp$preds
posteriors[[s]] <- cp$posterior
preds[[s]] <- preds[[s]]/sum(preds[[s]])  #normalize
}
x4preds <- seq(from=0,to=20,length.out=length(preds[[1]]))
#now start plotting
if (p2f) {
pdf(file="vwmerrors.pdf",height=6,width=6)
} else {x11(7,7)}
par(mar=c(4, 5, 1, 0.5),cex.lab=1.5)
ylimits <- c(0,0.4)
plot(vwmmeans$errdiscrete,vwmmeans$errors,
type="n",
ylab="Proportion of responses",
yaxt="n",
ylim=ylimits,
xlab="Difference from actual color value (degrees)",
xaxt="n",
xlim=c(0,20),
las=1)
abline(v=10,lty="dashed")
#plots for different setsizes superimposed with pdf of mixture model
with(subset(vwmmeans,setsize==ssz[1]),{
points(errdiscrete,errors,pch=21, cex=1.5, col="black",bg="white")
print(length(errdiscrete))
lines(x4preds,preds[[1]]*(length(preds[[1]])/length(errdiscrete)),lty="dashed",lwd=2)
})
with(subset(vwmmeans,setsize==ssz[2]),{
points(errdiscrete,errors,pch=21, cex=1.5, col="black",bg="gray")
print(length(errdiscrete))
lines(x4preds,preds[[2]]*(length(preds[[2]])/length(errdiscrete)),lwd=2)
})
legend("topleft",inset=.05,c("Set size 3","Set size 6"),pch=21,pt.bg=c("white","gray"),
pt.cex=2,lty=c("dashed","solid"),lwd=1.5)
par(tcl= -0.2)  #minor ticks
axis(1, at=seq(from=1,to=19,by=.5), labels=F, lwd=1, lwd.ticks=0.5)
axis(2, at=seq(from=0,to=ylimits[2],by=.01), labels=F, lwd=1, lwd.ticks=0.5)
par(tcl= -0.5)  #major ticks with labels
axis(1, at=c(1,3,5,7,9,10,11,13,15,17,19), labels=c(-180,-140,-100,-60,-20,0,20,60,100,140,180),
lwd=0, lwd.ticks=1,cex.axis=0.8)
axis(2, at=seq(from=0,to=ylimits[2],by=.1), labels=TRUE, lwd=1, lwd.ticks=0.5,las=1)
if (p2f) {dev.off()}
########plot posteriors
if (p2f) {
pdf(file="vmposteriors.pdf",height=5,width=5)
} else {x11(5,5)}
xl<- c("Sampled values of g",bquote("Sampled values of "*sigma[vM]))
par(mar=c(4, 4, 1, 0.5))
par(mfrow=c(2,2))
for (s in c(1,2)){
pe<-apply(posteriors[[s]],2,mean)
for(p in c(1,2)){
plot(density(posteriors[[s]][,p]),las=1,xlab=xl[p],
yaxt="n",lwd=2,lty="solid",
main="",ylab="")
mtext("    Density",2,1)
abline(v=pe[p],lty="solid",lwd=2,col="gray")
abline(v=quantile(posteriors[[s]][,p],.05),lty="dotted")
abline(v=quantile(posteriors[[s]][,p],.95),lty="dotted")
}
}
if (p2f) {dev.off()}
x11()
par(mfrow=c(1,2))
plot(c(1:length(posteriors[[1]][,1])),posteriors[[1]][,1],type="l")
plot(c(1:length(posteriors[[1]][,2])),posteriors[[1]][,2],type="l")
#perform SDT via ABC
#simulate sdt given parameters and number of trials
simsdt<- function(d,b,ntrials) {
old <- rnorm(ntrials/2,d)
hits <-sum(old>(d/2+b))/(ntrials/2)*100
new <- rnorm(ntrials/2,0)
fas <- sum(new>(d/2+b))/(ntrials/2)*100
return(X<-c(hits,fas))
}
y   <- c(60,11)  #define target data
dmu <- 1         #define hyperparameters
bmu <- 0
dsigma <- bsigma <- 1
ntrials <- 100
epsilon <- 1
posterior <- matrix(0,1000,2)
for (s in c(1:1000)) {  #commence ABC
while(TRUE) {
dprop <- rnorm(1,dmu,dsigma)
bprop <- rnorm(1,bmu,bsigma)
X<-simsdt(dprop,bprop,ntrials) #simulate proposal
if (sqrt(sum((y-X)^2)) <= epsilon) {break}
}
posterior[s,]<-c(dprop,bprop) #keep good simulation
print(s)                      #show sign of life
}
apply(posterior,2,mean)
apply(posterior,2,FUN=function(x) quantile(x,c(.025,.975)))
apply(posterior,2,hist)
print(c(s,sqrt(sum((y-X)^2)),X,posterior[s,]))
