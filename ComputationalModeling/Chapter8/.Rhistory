#gibbs sampler
require(mvtnorm)
require(MASS)
nsamples <- 1000
rho <- .8
mux  <- muy <- 0
sigx <- 1
sigy <- .5
sigma <- matrix(c(sigx^2,rho*sigx*sigy,rho*sigy*sigx,sigy^2),
nrow=2)
#draw contour plot of known distribution
fiftyticks <- seq(from=-3, to =3, length.out=50)
y<-rep(fiftyticks,50)
x<-rep(fiftyticks,each=50)
z<-matrix( dmvnorm(cbind(y,x),c(mux,muy),sigma),50,50)
contour(list(x=fiftyticks,y=fiftyticks,z=z),
ylim=c(-3,3),xlim=c(-3,3),drawlabels=FALSE)
#gibbs sampling
sxt1mr <- sqrt(sigx^2*(1-rho^2))
syt1mr <- sqrt(sigy^2*(1-rho^2))
rxy <- rho*(sigx/sigy)
ryx <- rho*(sigy/sigx)
xsamp <- ysamp <- rep(0,nsamples)
xsamp[1] <- -2
ysamp[1] <- 2
for (i in c(1:(nsamples-1))) {
xsamp[i+1] <- rnorm(1, mean=rxy*ysamp[i], sd=sxt1mr)
ysamp[i+1] <- rnorm(1, mean=ryx*xsamp[i+1], sd=syt1mr)
}
points(xsamp[-c(1:500)],ysamp[-c(1:500)],pch=21,bg="red")
for (j in c(1:5)){
points(xsamp[j],ysamp[j]-.005,pch=21,cex=3.5,bg="white")
text(xsamp[j],ysamp[j],as.character(j))
}
cor.test(xsamp,ysamp)
sd(xsamp)
sd(ysamp)
bivn<-rmvnorm(1000,rep(0,2),sigma)
#some checks
apply(bivn,2,mean)
apply(bivn,2,sd)
cor.test(bivn[,1],bivn[,2])
require(rjags)
N <- 1000
x <- rnorm(N, 0, 2)
myj <- jags.model("mymodel.j",
data = list("xx" = x, "N" = N))
update(myj,n.iter=1000)
mcmcfin<-coda.samples(myj,c("mu", "tau"),5000)
summary(mcmcfin)
plot(mcmcfin)
require(rjags)
N <- 1000
x <- rnorm(N, 0, 2)
myj <- jags.model("mymodel.j",
data = list("xx" = x, "N" = N))
update(myj,n.iter=1000)
mcmcfin<-coda.samples(myj,c("mu", "tau"),5000)
summary(mcmcfin)
plot(mcmcfin)
require(rjags)
N <- 1000
x <- rnorm(N, 0, 2)
myj <- jags.model("mymodel.j",
data = list("xx" = x, "N" = N))
update(myj,n.iter=1000)
mcmcfin<-coda.samples(myj,c("mu", "tau"),5000)
summary(mcmcfin)
plot(mcmcfin)
library(rjags)
#provide data from experiment
h <- 60
f <- 11
sigtrials <- noistrials <- 100
#initialize for JAGS
oneinit <- list(d=0, b=0)
myinits <- list(oneinit)[rep(1,4)]
myinits <- lapply(myinits,FUN=function(x) lapply(x, FUN=function(y) y+rnorm(1,0,.1)))
sdtj <- jags.model("SDT.j",
data = list("h"=h, "f"=f,
"sigtrials"=sigtrials,"noistrials"=noistrials),
inits=myinits,
n.chains=4)
# burnin
update(sdtj,n.iter=1000)
# perform MCMC
parameters <- c("d", "b", "phih", "phif")
mcmcfin<-coda.samples(sdtj,parameters,5000)
summary(mcmcfin)
plot(mcmcfin)
library(rjags)
#provide data from experiment
h <- 60
f <- 11
sigtrials <- noistrials <- 100
#initialize for JAGS
oneinit <- list(d=0, b=0)
myinits <- list(oneinit)[rep(1,4)]
myinits <- lapply(myinits,FUN=function(x) lapply(x, FUN=function(y) y+rnorm(1,0,.1)))
sdtj <- jags.model("SDT.j",
data = list("h"=h, "f"=f,
"sigtrials"=sigtrials,"noistrials"=noistrials),
inits=myinits,
n.chains=4)
# burnin
update(sdtj,n.iter=1000)
# perform MCMC
parameters <- c("d", "b", "phih", "phif")
mcmcfin<-coda.samples(sdtj,parameters,5000)
summary(mcmcfin)
plot(mcmcfin)
library(rjags)
#provide data from experiment
h <- 60
f <- 11
sigtrials <- noistrials <- 100
#initialize for JAGS
oneinit <- list(d=0, b=0)
myinits <- list(oneinit)[rep(1,4)]
myinits <- lapply(myinits,FUN=function(x) lapply(x, FUN=function(y) y+rnorm(1,0,.1)))
sdtj <- jags.model("SDT.j",
data = list("h"=h, "f"=f,
"sigtrials"=sigtrials,"noistrials"=noistrials),
inits=myinits,
n.chains=4)
# burnin
update(sdtj,n.iter=1000)
# perform MCMC
parameters <- c("d", "b", "phih", "phif")
mcmcfin<-coda.samples(sdtj,parameters,5000)
summary(mcmcfin)
plot(mcmcfin)
library(rjags)
#provide data from experiment
h <- 60
f <- 11
sigtrials <- noistrials <- 100
#define JAGS model
onehtj <- jags.model("1HT.j",
data = list("h"=h, "f"=f,
"sigtrials"=sigtrials,
"noistrials"=noistrials),
n.chains=4)
# burnin
update(onehtj,n.iter=1000)
# perform MCMC
parameters <- c("th1", "th2", "predh", "predf")
mcmcfin<-coda.samples(onehtj,parameters,5000)
summary(mcmcfin)
x11()
plot(mcmcfin)
x11()
acfplot(mcmcfin)
gelman.plot(mcmcfin)
library(rjags)
# initialize the data
consistent    <- c( 78, 70, 7, 15)
inconsistent  <- c(102, 55, 40, 53)
neutral       <- c( 63, 45, 13, 21)
Nsubj         <- c(170, 250, 142)
#define JAGS model
noconflict <- jags.model("wagenaar.j",
data = list("Nsubj"=Nsubj,
"consistent"=consistent,
"inconsistent"=inconsistent,
"neutral"=neutral),
n.chains=3)
# burnin
update(noconflict,n.iter=1000)
# perform MCMC
parms4j <- c("p", "q", "c","predprob")
mcmcfin<-coda.samples(noconflict,parms4j,5000)
summary(mcmcfin)
plot(mcmcfin)
