points(xsamp[j],ysamp[j]-.005,pch=21,cex=3.5,bg="white")
text(xsamp[j],ysamp[j],as.character(j))
}
cor.test(xsamp,ysamp)
sd(xsamp)
sd(ysamp)
bivn<-rmvnorm(1000,rep(0,2),sigma)
#some checks
apply(bivn,2,mean)
apply(bivn,2,sd)
cor.test(bivn[,1],bivn[,2])
require(rjags)
N <- 1000
x <- rnorm(N, 0, 2)
myj <- jags.model("mymodel.j",
data = list("xx" = x, "N" = N))
update(myj,n.iter=1000)
mcmcfin<-coda.samples(myj,c("mu", "tau"),5000)
summary(mcmcfin)
plot(mcmcfin)
require(rjags)
N <- 1000
x <- rnorm(N, 0, 2)
myj <- jags.model("mymodel.j",
data = list("xx" = x, "N" = N))
update(myj,n.iter=1000)
mcmcfin<-coda.samples(myj,c("mu", "tau"),5000)
summary(mcmcfin)
plot(mcmcfin)
require(rjags)
N <- 1000
x <- rnorm(N, 0, 2)
myj <- jags.model("mymodel.j",
data = list("xx" = x, "N" = N))
update(myj,n.iter=1000)
mcmcfin<-coda.samples(myj,c("mu", "tau"),5000)
summary(mcmcfin)
plot(mcmcfin)
library(rjags)
#provide data from experiment
h <- 60
f <- 11
sigtrials <- noistrials <- 100
#initialize for JAGS
oneinit <- list(d=0, b=0)
myinits <- list(oneinit)[rep(1,4)]
myinits <- lapply(myinits,FUN=function(x) lapply(x, FUN=function(y) y+rnorm(1,0,.1)))
sdtj <- jags.model("SDT.j",
data = list("h"=h, "f"=f,
"sigtrials"=sigtrials,"noistrials"=noistrials),
inits=myinits,
n.chains=4)
# burnin
update(sdtj,n.iter=1000)
# perform MCMC
parameters <- c("d", "b", "phih", "phif")
mcmcfin<-coda.samples(sdtj,parameters,5000)
summary(mcmcfin)
plot(mcmcfin)
library(rjags)
#provide data from experiment
h <- 60
f <- 11
sigtrials <- noistrials <- 100
#initialize for JAGS
oneinit <- list(d=0, b=0)
myinits <- list(oneinit)[rep(1,4)]
myinits <- lapply(myinits,FUN=function(x) lapply(x, FUN=function(y) y+rnorm(1,0,.1)))
sdtj <- jags.model("SDT.j",
data = list("h"=h, "f"=f,
"sigtrials"=sigtrials,"noistrials"=noistrials),
inits=myinits,
n.chains=4)
# burnin
update(sdtj,n.iter=1000)
# perform MCMC
parameters <- c("d", "b", "phih", "phif")
mcmcfin<-coda.samples(sdtj,parameters,5000)
summary(mcmcfin)
plot(mcmcfin)
library(rjags)
#provide data from experiment
h <- 60
f <- 11
sigtrials <- noistrials <- 100
#initialize for JAGS
oneinit <- list(d=0, b=0)
myinits <- list(oneinit)[rep(1,4)]
myinits <- lapply(myinits,FUN=function(x) lapply(x, FUN=function(y) y+rnorm(1,0,.1)))
sdtj <- jags.model("SDT.j",
data = list("h"=h, "f"=f,
"sigtrials"=sigtrials,"noistrials"=noistrials),
inits=myinits,
n.chains=4)
# burnin
update(sdtj,n.iter=1000)
# perform MCMC
parameters <- c("d", "b", "phih", "phif")
mcmcfin<-coda.samples(sdtj,parameters,5000)
summary(mcmcfin)
plot(mcmcfin)
library(rjags)
#provide data from experiment
h <- 60
f <- 11
sigtrials <- noistrials <- 100
#define JAGS model
onehtj <- jags.model("1HT.j",
data = list("h"=h, "f"=f,
"sigtrials"=sigtrials,
"noistrials"=noistrials),
n.chains=4)
# burnin
update(onehtj,n.iter=1000)
# perform MCMC
parameters <- c("th1", "th2", "predh", "predf")
mcmcfin<-coda.samples(onehtj,parameters,5000)
summary(mcmcfin)
x11()
plot(mcmcfin)
x11()
acfplot(mcmcfin)
gelman.plot(mcmcfin)
library(rjags)
# initialize the data
consistent    <- c( 78, 70, 7, 15)
inconsistent  <- c(102, 55, 40, 53)
neutral       <- c( 63, 45, 13, 21)
Nsubj         <- c(170, 250, 142)
#define JAGS model
noconflict <- jags.model("wagenaar.j",
data = list("Nsubj"=Nsubj,
"consistent"=consistent,
"inconsistent"=inconsistent,
"neutral"=neutral),
n.chains=3)
# burnin
update(noconflict,n.iter=1000)
# perform MCMC
parms4j <- c("p", "q", "c","predprob")
mcmcfin<-coda.samples(noconflict,parms4j,5000)
summary(mcmcfin)
plot(mcmcfin)
library(rjags)
#provide data from experiment
h <- 60
f <- 11
sigtrials <- noistrials <- 100
#initialize for JAGS
oneinit <- list(d=0, b=0)
myinits <- list(oneinit)[rep(1,4)]
myinits <- lapply(myinits,FUN=function(x) lapply(x, FUN=function(y) y+rnorm(1,0,.1)))
sdtj <- jags.model("SDT.j",
data = list("h"=h, "f"=f,
"sigtrials"=sigtrials,"noistrials"=noistrials),
inits=myinits,
n.chains=4)
# burnin
update(sdtj,n.iter=1000)
# perform MCMC
parameters <- c("d", "b", "phih", "phif")
mcmcfin<-coda.samples(sdtj,parameters,5000)
summary(mcmcfin)
plot(mcmcfin)
plot(mcmcfin)
x11()
plot(mcmcfin)
gelman.plot(mcmcfin)
# Get the operating system name
os_name <- Sys.info()["sysname"]
os_name
os_name <- Sys.info()["sysname"]
if (os_name == "Darwin") {
x11()
}
plot(mcmcfin)
gelman.plot(mcmcfin)
library(rjags)
# initialize the data
consistent    <- c( 78, 70, 7, 15)
inconsistent  <- c(102, 55, 40, 53)
neutral       <- c( 63, 45, 13, 21)
Nsubj         <- c(170, 250, 142)
#define JAGS model
noconflict <- jags.model("wagenaar.j",
data = list("Nsubj"=Nsubj,
"consistent"=consistent,
"inconsistent"=inconsistent,
"neutral"=neutral),
n.chains=3)
# burnin
update(noconflict,n.iter=1000)
# perform MCMC
parms4j <- c("p", "q", "c","predprob")
mcmcfin<-coda.samples(noconflict,parms4j,5000)
summary(mcmcfin)
if (os_name == "Darwin") {
x11()
}
library(rjags)
# initialize the data
consistent    <- c( 78, 70, 7, 15)
inconsistent  <- c(102, 55, 40, 53)
neutral       <- c( 63, 45, 13, 21)
Nsubj         <- c(170, 250, 142)
#define JAGS model
noconflict <- jags.model("wagenaar.j",
data = list("Nsubj"=Nsubj,
"consistent"=consistent,
"inconsistent"=inconsistent,
"neutral"=neutral),
n.chains=3)
# burnin
update(noconflict,n.iter=1000)
# perform MCMC
parms4j <- c("p", "q", "c","predprob")
mcmcfin<-coda.samples(noconflict,parms4j,5000)
summary(mcmcfin)
# Get the operating system name
os_name <- Sys.info()["sysname"]
if (os_name == "Darwin") {
x11()
}
# Plot
plot(mcmcfin)
acfplot(mcmcfin)
gelman.plot(mcmcfin)
#Listing 8.10 from here on
allpost <- function(mcmcfin,pn) {
return (unlist(lapply(mcmcfin,FUN=function(x) c(x[,pn]))))
}
mean(allpost(mcmcfin,"c")>.5)
mean(allpost(mcmcfin,"p")>.5)
mean(allpost(mcmcfin,"q")>.5)
require(lme4)
n <- 10
sigtrials <- noistrials <- 100
ntrials <- sigtrials + noistrials
h <- rbinom(n,sigtrials, .60)
f <- rbinom(n,noistrials,.11)
subj <- rep(c(1:n),each=ntrials)
stim <- rep(c(rep(1,sigtrials),rep(0,noistrials)),n)
resp <- as.vector( vapply(h,FUN=function(x)
as.integer(c(rep(1,x),
rep(0,ntrials-x))),
integer(ntrials))
+
vapply(f,FUN=function(x)
as.integer(c(rep(0,sigtrials),
rep(1,x),rep(0,noistrials-x))),
integer(ntrials))  )
#model with intercept = z(FA) default
mlhierarchSDT <- glmer(resp ~ stim + (1+stim|subj), family=binomial(probit))
library(stats)
library(stats)
require(lme4)
n <- 10
sigtrials <- noistrials <- 100
ntrials <- sigtrials + noistrials
h <- rbinom(n,sigtrials, .60)
f <- rbinom(n,noistrials,.11)
subj <- rep(c(1:n),each=ntrials)
stim <- rep(c(rep(1,sigtrials),rep(0,noistrials)),n)
resp <- as.vector( vapply(h,FUN=function(x)
as.integer(c(rep(1,x),
rep(0,ntrials-x))),
integer(ntrials))
+
vapply(f,FUN=function(x)
as.integer(c(rep(0,sigtrials),
rep(1,x),rep(0,noistrials-x))),
integer(ntrials))  )
#model with intercept = z(FA) default
mlhierarchSDT <- glmer(resp ~ stim + (1+stim|subj), family=binomial(probit))
require(lme4)
n <- 10
sigtrials <- noistrials <- 100
ntrials <- sigtrials + noistrials
h <- rbinom(n,sigtrials, .60)
f <- rbinom(n,noistrials,.11)
subj <- rep(c(1:n),each=ntrials)
stim <- rep(c(rep(1,sigtrials),rep(0,noistrials)),n)
resp <- as.vector( vapply(h,FUN=function(x)
as.integer(c(rep(1,x),
rep(0,ntrials-x))),
integer(ntrials))
+
vapply(f,FUN=function(x)
as.integer(c(rep(0,sigtrials),
rep(1,x),rep(0,noistrials-x))),
integer(ntrials))  )
#model with intercept = z(FA) default
mlhierarchSDT <- glmer(resp ~ stim + (1+stim|subj), family=binomial(link = "probit"))
summary(mlhierarchSDT)
require(lme4)
n <- 10
sigtrials <- noistrials <- 100
ntrials <- sigtrials + noistrials
h <- rbinom(n,sigtrials, .60)
f <- rbinom(n,noistrials,.11)
subj <- rep(c(1:n),each=ntrials)
stim <- rep(c(rep(1,sigtrials),rep(0,noistrials)),n)
resp <- as.vector( vapply(h,FUN=function(x)
as.integer(c(rep(1,x),
rep(0,ntrials-x))),
integer(ntrials))
+
vapply(f,FUN=function(x)
as.integer(c(rep(0,sigtrials),
rep(1,x),rep(0,noistrials-x))),
integer(ntrials))  )
#model with intercept = z(FA) default
mlhierarchSDT <- glmer(resp ~ stim + (1+stim|subj), family=binomial(link = "probit"))
summary(mlhierarchSDT)
#reparameterize so intercept = c
reparmstim <- cbind(-1,stim)
colnames(reparmstim) <- c("_c", "_d'")
mlhierarchSDTc <- glmer(resp ~ reparmstim-1 + (1+stim|subj), family=binomial(link = "probit"))
summary(mlhierarchSDTc)
#reparameterize so b is not highly correlated with d'
rmstim <- stim-.5
reparmstim <- cbind(-1,rmstim)
colnames(reparmstim) <- c("_b", "_d'")
mlhierarchSDTrp <- glmer(resp ~ reparmstim-1 + (1+rmstim|subj), family=binomial(link = "probit"))
summary(mlhierarchSDTrp)
rm(list=ls())
#discrepancy for power forgetting function
powdiscrep <- function (parms,rec,ri) {
if (any(parms<0)||any(parms>1)) return(1e6)
pow_pred <- parms["a"] *(parms["b"]*ri + 1)^(-parms["c"])
return(sqrt( sum((pow_pred-rec)^2)/length(ri) ))
}
#Carpenter et al. (2008) Experiment 1
rec <- c(.93,.88,.86,.66,.47,.34)
ri  <- c(.0035, 1, 2, 7, 14, 42)
#initialize starting values
sparms <-c(1,.05,.7)
names(sparms) <- c("a","b","c")
#obtain best-fitting estimates
pout <- optim(sparms,powdiscrep,rec=rec,ri=ri)
pow_pred <- pout$par["a"] *(pout$par["b"]*c(0:max(ri)) + 1)^(-pout$par["c"])
#plot data and best-fitting predictions
x11()
par(cex.axis=1.2,cex.lab=1.4)
par(mar=(c(5, 5, 3, 2) + 0.1),las=1)
plot(ri,rec,
xlab = "Retention Interval (Days)",
ylab = "Proportion Items Retained",
ylim=c(0.3,1),xlim=c(0,43),xaxt="n",type="n")
lines(c(0:max(ri)),pow_pred,lwd=2)
points(ri,rec,pch=21, bg="dark grey",cex=2)
dev <- pow_pred[ri+1]
for (x in c(1:length(ri))) {
lines(c(ri[x],ri[x]),c(dev[x],rec[x]),lwd=1)
}
axis(1,at=c(0:43))
#perform bootstrapping analysis
ns  <- 55
nbs <- 1000
bsparms <- matrix(NA,nbs,length(sparms))
bspow_pred <- pout$par["a"] *(pout$par["b"]*ri + 1)^(-pout$par["c"])
for (i in c(1:nbs)) {
recsynth     <- vapply(bspow_pred, FUN=function(x) mean(rbinom(ns,1,x)), numeric(1))
bsparms[i,]  <- unlist(optim(pout$par,powdiscrep,rec=recsynth,ri=ri)$par)
}
#function to plot a histogram
histoplot<-function(x,l4x) {
hist(x,xlab=l4x,main="",xlim=c(0,1),cex.lab=1.5,cex.axis=1.5)
lq <- quantile(x,0.025)
abline(v=lq,lty="dashed",lwd=2)
uq <- quantile(x,0.975)
abline(v=uq,lty="dashed",lwd=2)
return(c(lq,uq))
}
x11(5,2)
par(mfcol=c(1,3),las=1)
for (i in c(1:dim(bsparms)[2])) {
print(histoplot(bsparms[,i],names(sparms)[i]))
}
x11(10,4)
par(mfcol=c(1,3),las=1)
for (i in c(1:dim(bsparms)[2])) {
print(histoplot(bsparms[,i],names(sparms)[i]))
}
rm(list=ls())
#discrepancy for power forgetting function
powdiscrep <- function (parms,rec,ri) {
if (any(parms<0)||any(parms>1)) return(1e6)
pow_pred <- parms["a"] *(parms["b"]*ri + 1)^(-parms["c"])
return(sqrt( sum((pow_pred-rec)^2)/length(ri) ))
}
#Carpenter et al. (2008) Experiment 1
rec <- c(.93,.88,.86,.66,.47,.34)
ri  <- c(.0035, 1, 2, 7, 14, 42)
#initialize starting values
sparms <-c(1,.05,.7)
names(sparms) <- c("a","b","c")
#obtain best-fitting estimates
pout <- optim(sparms,powdiscrep,rec=rec,ri=ri)
pow_pred <- pout$par["a"] *(pout$par["b"]*c(0:max(ri)) + 1)^(-pout$par["c"])
#plot data and best-fitting predictions
x11()
par(cex.axis=1.2,cex.lab=1.4)
par(mar=(c(5, 5, 3, 2) + 0.1),las=1)
plot(ri,rec,
xlab = "Retention Interval (Days)",
ylab = "Proportion Items Retained",
ylim=c(0.3,1),xlim=c(0,43),xaxt="n",type="n")
lines(c(0:max(ri)),pow_pred,lwd=2)
points(ri,rec,pch=21, bg="dark grey",cex=2)
dev <- pow_pred[ri+1]
for (x in c(1:length(ri))) {
lines(c(ri[x],ri[x]),c(dev[x],rec[x]),lwd=1)
}
axis(1,at=c(0:43))
#perform bootstrapping analysis
ns  <- 55
nbs <- 1000
bsparms <- matrix(NA,nbs,length(sparms))
bspow_pred <- pout$par["a"] *(pout$par["b"]*ri + 1)^(-pout$par["c"])
for (i in c(1:nbs)) {
recsynth     <- vapply(bspow_pred, FUN=function(x) mean(rbinom(ns,1,x)), numeric(1))
bsparms[i,]  <- unlist(optim(pout$par,powdiscrep,rec=recsynth,ri=ri)$par)
}
#function to plot a histogram
histoplot<-function(x,l4x) {
hist(x,xlab=l4x,main="",xlim=c(0,1),cex.lab=1.5,cex.axis=1.5)
lq <- quantile(x,0.025)
abline(v=lq,lty="dashed",lwd=2)
uq <- quantile(x,0.975)
abline(v=uq,lty="dashed",lwd=2)
return(c(lq,uq))
}
x11(10,4)
par(mfcol=c(1,3),las=1)
for (i in c(1:dim(bsparms)[2])) {
print(histoplot(bsparms[,i],names(sparms)[i]))
}
x11(5,4)
par(mfcol=c(1,3),las=1)
for (i in c(1:dim(bsparms)[2])) {
print(histoplot(bsparms[,i],names(sparms)[i]))
}
x11(20,4)
par(mfcol=c(1,3),las=1)
for (i in c(1:dim(bsparms)[2])) {
print(histoplot(bsparms[,i],names(sparms)[i]))
}
x11(100,4)
par(mfcol=c(1,3),las=1)
for (i in c(1:dim(bsparms)[2])) {
print(histoplot(bsparms[,i],names(sparms)[i]))
}
x11()
par(mfcol=c(1,3),las=1)
for (i in c(1:dim(bsparms)[2])) {
print(histoplot(bsparms[,i],names(sparms)[i]))
}
rm(list=ls())
#discrepancy for power forgetting function
powdiscrep <- function (parms,rec,ri) {
if (any(parms<0)||any(parms>1)) return(1e6)
pow_pred <- parms["a"] *(parms["b"]*ri + 1)^(-parms["c"])
return(sqrt( sum((pow_pred-rec)^2)/length(ri) ))
}
#Carpenter et al. (2008) Experiment 1
rec <- c(.93,.88,.86,.66,.47,.34)
ri  <- c(.0035, 1, 2, 7, 14, 42)
#initialize starting values
sparms <-c(1,.05,.7)
names(sparms) <- c("a","b","c")
#obtain best-fitting estimates
pout <- optim(sparms,powdiscrep,rec=rec,ri=ri)
pow_pred <- pout$par["a"] *(pout$par["b"]*c(0:max(ri)) + 1)^(-pout$par["c"])
#plot data and best-fitting predictions
x11()
par(cex.axis=1.2,cex.lab=1.4)
par(mar=(c(5, 5, 3, 2) + 0.1),las=1)
plot(ri,rec,
xlab = "Retention Interval (Days)",
ylab = "Proportion Items Retained",
ylim=c(0.3,1),xlim=c(0,43),xaxt="n",type="n")
lines(c(0:max(ri)),pow_pred,lwd=2)
points(ri,rec,pch=21, bg="dark grey",cex=2)
dev <- pow_pred[ri+1]
for (x in c(1:length(ri))) {
lines(c(ri[x],ri[x]),c(dev[x],rec[x]),lwd=1)
}
axis(1,at=c(0:43))
#perform bootstrapping analysis
ns  <- 55
nbs <- 1000
bsparms <- matrix(NA,nbs,length(sparms))
bspow_pred <- pout$par["a"] *(pout$par["b"]*ri + 1)^(-pout$par["c"])
for (i in c(1:nbs)) {
recsynth     <- vapply(bspow_pred, FUN=function(x) mean(rbinom(ns,1,x)), numeric(1))
bsparms[i,]  <- unlist(optim(pout$par,powdiscrep,rec=recsynth,ri=ri)$par)
}
#function to plot a histogram
histoplot<-function(x,l4x) {
hist(x,xlab=l4x,main="",xlim=c(0,1),cex.lab=1.5,cex.axis=1.5)
lq <- quantile(x,0.025)
abline(v=lq,lty="dashed",lwd=2)
uq <- quantile(x,0.975)
abline(v=uq,lty="dashed",lwd=2)
return(c(lq,uq))
}
x11()
par(mfcol=c(1,3),las=1)
for (i in c(1:dim(bsparms)[2])) {
print(histoplot(bsparms[,i],names(sparms)[i]))
}
