library(rjags)
epsilon <- .01
#simulate data for 4 subjects
tlags <- c(0, 1, 5, 10, 20, 50)
nlags <- length(tlags)
nsubj <- 4
nitems <- 20
nrecalled <- matrix(0,nsubj,nlags)
for (i in c(1:nsubj)) {
a     <- runif(1,.0,.2)
b     <- runif(1,.9,1.0)
alpha <- runif(1,.1,.4)
print(c(a,b,alpha))
for (j in c(1:nlags)) {
p <- a + (1-a) * b * exp(-alpha*tlags[j])
nrecalled[i,j] <- rbinom(1,nitems,p)
}
}
#define model
forgexpjh <- jags.model("hierarchforgexp.j",
data = list("epsilon"=epsilon,
"t"  = tlags,
"k"  = nrecalled,
"n"  = nitems,
"ns" = nsubj,
"nt" = nlags),
n.chains=1)
# burnin
update(forgexpjh,n.iter=1000)
# perform MCMC
parameters <- c("mualpha", "mua", "mub",
"taualpha", "taua", "taub",
"a", "b", "alpha","theta")
mcmcfin<-coda.samples(forgexpjh,parameters,5000)
summary(mcmcfin)
library(rjags)
#simulate data from experiment with 10 subjects
n <- 10
sigtrials <- noistrials <- 100
h <- rbinom(n,sigtrials, .8)
f <- rbinom(n,noistrials,.2)
#initialize for JAGS
oneinit <- list(mud=0, mub=0, taud=1, taub=1, d=rep(0,n), b=rep(0,n))
myinits <- list(oneinit)[rep(1,4)]
sdtjh <- jags.model("SDThierarch.j",
data = list("epsilon"=0.001,
"h"=h, "f"=f, "n"=n,
"sigtrials" =sigtrials,
"noistrials"=noistrials),
inits=myinits,
n.chains=4)
# burnin
update(sdtjh,n.iter=1000)
# perform MCMC
parameters <- c("d", "b", "taud", "taub", "mud", "mub", "phih", "phif")
mcmcfin<-coda.samples(sdtjh,parameters,5000)
library(rjags)
epsilon <- .01
#simulate data for 4 subjects
tlags <- c(0, 1, 5, 10, 20, 50)
nlags <- length(tlags)
nsubj <- 4
nitems <- 20
nrecalled <- matrix(0,nsubj,nlags)
for (i in c(1:nsubj)) {
a     <- runif(1,.0,.2)
b     <- runif(1,.9,1.0)
beta <- runif(1,.1,.4)
print(c(a,b,beta))
for (j in c(1:nlags)) {
p <- a + (1-a) * b * (tlags[j]+1)^(-beta)
nrecalled[i,j] <- rbinom(1,nitems,p)
}
}
#define model
forgpowjh <- jags.model("hierarchforgpow.j",
data = list("epsilon"=epsilon,
"t"  = tlags,
"k"  = nrecalled,
"n"  = nitems,
"ns" = nsubj,
"nt" = nlags),
n.chains=1)
# burnin
update(forgpowjh,n.iter=1000)
# perform MCMC
parameters <- c("mubeta", "mua", "mub",
"taubeta", "taua", "taub",
"a", "b", "beta","theta")
mcmcfin<-coda.samples(forgpowjh,parameters,5000)
summary(mcmcfin)
library(R.utils)
library(rjags)
grabfun<-function(x,p,var) {return(x[x$subj==p,var])}
itcdata<-read.table("hierarchicalITC.dat",header=TRUE)
subjects <- unique(itcdata$subj)
ntrials  <- dim(itcdata)[1]/length(unique(itcdata$subj))
nsubj    <- length(unique(itcdata$subj))
delays4A  <- t(vapply(subjects,FUN=function(x) grabfun(itcdata,x,"DA"),integer(ntrials)))
delays4B  <- t(vapply(subjects,FUN=function(x) grabfun(itcdata,x,"DB"),integer(ntrials)))
amounts4A <- t(vapply(subjects,FUN=function(x) grabfun(itcdata,x,"A"),integer(ntrials)))
amounts4B <- t(vapply(subjects,FUN=function(x) grabfun(itcdata,x,"B"),integer(ntrials)))
responses <- t(vapply(subjects,FUN=function(x) grabfun(itcdata,x,"R"),integer(ntrials)))
#initialize model for JAGS
hierITC <- jags.model("hierarchicalITC.j",
data = list("nsubj"=nsubj,
"DA"=delays4A,
"DB"=delays4B,
"A"=amounts4A,
"B"=amounts4B,
"T"=ntrials,
"R"=responses),
n.chains=4)
# burnin
update(hierITC,n.iter=1000)
# perform MCMC
parameters <- c("k", "alpha", "groupkmu", "groupksigma", "groupALPHAmu", "groupALPHAsigma",
"VA","VB","P","DB")
mcmcfin<-coda.samples(hierITC,parameters,5000)
summary(mcmcfin)
summary(mlhierarchSDTc)
require(lme4)
n <- 10
sigtrials <- noistrials <- 100
ntrials <- sigtrials + noistrials
h <- rbinom(n,sigtrials, .60)
f <- rbinom(n,noistrials,.11)
subj <- rep(c(1:n),each=ntrials)
stim <- rep(c(rep(1,sigtrials),rep(0,noistrials)),n)
resp <- as.vector( vapply(h,FUN=function(x)
as.integer(c(rep(1,x),
rep(0,ntrials-x))),
integer(ntrials))
+
vapply(f,FUN=function(x)
as.integer(c(rep(0,sigtrials),
rep(1,x),rep(0,noistrials-x))),
integer(ntrials))  )
#model with intercept = z(FA) default
mlhierarchSDT <- glmer(resp ~ stim + (1+stim|subj), family=binomial(probit))
require(lme4)
n <- 10
sigtrials <- noistrials <- 100
ntrials <- sigtrials + noistrials
h <- rbinom(n,sigtrials, .60)
f <- rbinom(n,noistrials,.11)
subj <- rep(c(1:n),each=ntrials)
stim <- rep(c(rep(1,sigtrials),rep(0,noistrials)),n)
resp <- as.vector( vapply(h,FUN=function(x)
as.integer(c(rep(1,x),
rep(0,ntrials-x))),
integer(ntrials))
+
vapply(f,FUN=function(x)
as.integer(c(rep(0,sigtrials),
rep(1,x),rep(0,noistrials-x))),
integer(ntrials))  )
#model with intercept = z(FA) default
mlhierarchSDT <- glmer(resp ~ stim + (1+stim|subj), family=binomial(probit))
library(rjags)
epsilon <- .01
#simulate data for 4 subjects
tlags <- c(0, 1, 5, 10, 20, 50)
nlags <- length(tlags)
nsubj <- 4
nitems <- 20
nrecalled <- matrix(0,nsubj,nlags)
for (i in c(1:nsubj)) {
a     <- runif(1,.0,.2)
b     <- runif(1,.9,1.0)
alpha <- runif(1,.1,.4)
print(c(a,b,alpha))
for (j in c(1:nlags)) {
p <- a + (1-a) * b * exp(-alpha*tlags[j])
nrecalled[i,j] <- rbinom(1,nitems,p)
}
}
#define model
forgexpjh <- jags.model("hierarchforgexp.j",
data = list("epsilon"=epsilon,
"t"  = tlags,
"k"  = nrecalled,
"n"  = nitems,
"ns" = nsubj,
"nt" = nlags),
n.chains=1)
# burnin
update(forgexpjh,n.iter=1000)
# perform MCMC
parameters <- c("mualpha", "mua", "mub",
"taualpha", "taua", "taub",
"a", "b", "alpha","theta")
mcmcfin<-coda.samples(forgexpjh,parameters,5000)
summary(mcmcfin)
